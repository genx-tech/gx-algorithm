{"version":3,"names":["eachAsync_","require","InvalidArgument","Forbidden","FiniteStateMachine","constructor","app","transitionTable","stateFetcher","stateUpdater","transitions","stateFetcher_","stateUpdater_","getAllowedActions_","context","withDisallowedReason","currentState","allowed","disallowed","rule","action","actionAllowed","disallowedReason","when","OK","push","desc","targetState","target","reason","ret","performAction_","payload","updateOpts","connOpts","entityUpdate","before","actuallyUpdated","updateResult","after","array","args","action_","l","length","i","checker_","fail","join","module","exports"],"sources":["FiniteStateMachine.js"],"sourcesContent":["const { eachAsync_ } = require('@genx/july');\nconst { InvalidArgument, Forbidden } = require('@genx/error');\n\n/**\n *\n * Action rule:\n *  desc: description of this transition\n *  when: pre transition condition check\n *  target: target state\n *  before: transforming before applying to the state\n *  after: trigger another action after transition\n */\n\nclass FiniteStateMachine {\n    static OK = [true];\n    static fail = (reason) => [false, reason];\n    static triggerAll_ =\n        (array) =>\n        (...args) =>\n            eachAsync_(array, (action_) => action_(...args));\n\n    static ifAny =\n        (array) =>\n        async (...args) => {\n            const l = array.length;\n            const reason = [];\n\n            for (let i = 0; i < l; i++) {\n                const checker_ = array[i];\n\n                const [allowed, disallowedReason] = await checker_(...args);\n                if (allowed) {\n                    return FiniteStateMachine.OK;\n                }\n\n                reason.push(disallowedReason);\n            }\n\n            return FiniteStateMachine.fail(\n                'None of the required conditions met.\\n' + reason.join('\\n')\n            );\n        };\n\n    static ifAll =\n        (array) =>\n        async (...args) => {\n            const l = array.length;\n\n            for (let i = 0; i < l; i++) {\n                const checker_ = array[i];\n\n                const [allowed, disallowedReason] = await checker_(...args);\n                if (!allowed) {\n                    return FiniteStateMachine.fail(disallowedReason);\n                }\n            }\n\n            return FiniteStateMachine.OK;\n        };\n\n    constructor(app, transitionTable, stateFetcher, stateUpdater) {\n        this.app = app;\n\n        this.transitions = transitionTable;\n        this.stateFetcher_ = stateFetcher;\n        this.stateUpdater_ = stateUpdater;\n    }\n\n    /**\n     * Get a list of allowed actions based on the current state.\n     * @param {*} context\n     * @param {boolean} withDisallowedReason\n     */\n    async getAllowedActions_(context, withDisallowedReason) {\n        const currentState = await this.stateFetcher_(this.app, context);\n\n        // from state\n        const transitions = this.transitions[currentState];\n        if (!transitions) {\n            throw new InvalidArgument(\n                `State \"${currentState}\" rules not found in the transition table.`\n            );\n        }\n\n        const allowed = [];\n        const disallowed = [];\n\n        await eachAsync_(transitions, async (rule, action) => {\n            const [actionAllowed, disallowedReason] =\n                (rule.when && (await rule.when(this.app, context))) ||\n                FiniteStateMachine.OK;\n\n            if (actionAllowed) {\n                allowed.push({\n                    action,\n                    desc: rule.desc,\n                    targetState: rule.target,\n                });\n            } else if (withDisallowedReason) {\n                disallowed.push({\n                    action,\n                    desc: rule.desc,\n                    targetState: rule.target,\n                    reason: disallowedReason,\n                });\n            }\n        });\n\n        const ret = {\n            allowed,\n        };\n\n        if (withDisallowedReason) {\n            ret.disallowed = disallowed;\n        }\n\n        return ret;\n    }\n\n    /**\n     * Perform the specified action.\n     * @param {*} action\n     * @param {*} context\n     * @param {*} payload\n     * @param {*} updateOpts\n     * @param {*} connOpts\n     */\n    async performAction_(action, context, payload, updateOpts, connOpts) {\n        const currentState = await this.stateFetcher_(\n            this.app,\n            context,\n            connOpts\n        );\n\n        const transitions = this.transitions[currentState];\n        if (!transitions) {\n            throw new InvalidArgument(\n                `State \"${currentState}\" rules not found in the transition table.`\n            );\n        }\n\n        const rule = transitions && transitions[action];\n        if (!rule) {\n            throw new Forbidden(\n                `Action \"${action}\" is not allowed in \"${currentState}\" state.`\n            );\n        }\n\n        if (rule.when) {\n            const [allowed, disallowedReason] = await rule.when(\n                this.app,\n                context\n            );\n            if (!allowed) {\n                throw new Forbidden(\n                    disallowedReason ||\n                        `The current state does not meet the requirements of \"${action}\" action.`\n                );\n            }\n        }\n\n        const entityUpdate = (rule.before &&\n            (await rule.before(this.app, context, payload))) || { ...payload };\n        const [actuallyUpdated, updateResult] = await this.stateUpdater_(\n            this.app,\n            context,\n            entityUpdate,\n            rule.target,\n            updateOpts,\n            connOpts\n        );\n\n        if (actuallyUpdated && rule.after) {\n            await rule.after(this.app, context, connOpts);\n        }\n\n        return updateResult;\n    }\n}\n\nmodule.exports = FiniteStateMachine;\n"],"mappings":"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"}