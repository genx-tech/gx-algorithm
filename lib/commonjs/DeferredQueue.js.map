{"version":3,"sources":["DeferredQueue.js"],"names":["DeferredQueue","constructor","app","storageModel","processTimeout","storage","model","genreateBatchId","Generators","require","shortid","postJobRequest_","job","deferedTime","now","due","plus","milliseconds","queuedJob","create_","JSON","stringify","dueAt","batchId","insertIgnore","popExpiredRequests_","expired","minus","lockerId","updated","updateMany_","$query","$neq","dispatchedAt","$lte","$exists","$retrieveUpdated","length","remove_","processDueRequests_","conditon","deleteMany_","removeById_","id","deleteOne_","clearQueue_","deleteAll_","getBatchStatus_","batchStats","findAll_","$projection","db","connector","queryCount","$groupBy","$skipOrm","pending","processing","batches","forEach","batch","numPending","numProcessing","module","exports"],"mappings":"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","sourcesContent":["/**\n * id, job, dueAt, status, batchId (default '*'), dispatchedAt, lockFlag\n * uniqueKeys: [ job, batchId ]\n *\n * todo: automatically create db structure if not exist\n */\nclass DeferredQueue {\n    constructor(app, storageModel, processTimeout) {\n        this.app = app;\n        this.storage = this.app.model(storageModel);\n        this.processTimeout = processTimeout || 600000;\n    }\n\n    genreateBatchId() {\n        const { Generators } = require('@genx/data');\n        return Generators.shortid();\n    }\n\n    async postJobRequest_(job, deferedTime) {\n        const now = this.app.now();\n        const due = now.plus({ milliseconds: deferedTime || 3000 });\n\n        const queuedJob = await this.storage.create_(\n            {\n                job: JSON.stringify(job),\n                dueAt: due,\n                batchId: '*',\n            },\n            null,\n            {\n                insertIgnore: true,\n            }\n        );\n\n        return queuedJob;\n    }\n\n    async popExpiredRequests_() {\n        const expired = this.app\n            .now()\n            .minus({ milliseconds: this.processTimeout });\n        const lockerId = this.genreateBatchId();\n\n        const updated = await this.storage.updateMany_(\n            {\n                lockerId,\n            },\n            {\n                $query: {\n                    batchId: { $neq: '*' },\n                    dispatchedAt: { $lte: expired },\n                    lockerId: { $exists: false },\n                },\n                $retrieveUpdated: {\n                    $query: {\n                        lockerId,\n                    },\n                },\n            }\n        );\n\n        if (updated.length > 0) {\n            await this.remove_({ lockerId });\n        }\n\n        return updated;\n    }\n\n    async processDueRequests_() {\n        const now = this.app.now();\n        const batchId = this.genreateBatchId();\n\n        const updated = await this.storage.updateMany_(\n            {\n                batchId,\n                dispatchedAt: now,\n            },\n            {\n                $query: {\n                    batchId: '*',\n                    dueAt: { $lte: now },\n                },\n                $retrieveUpdated: {\n                    $query: {\n                        batchId,\n                    },\n                },\n            }\n        );\n\n        return updated;\n    }\n\n    async remove_(conditon) {\n        await this.storage.deleteMany_(conditon);\n    }\n\n    async removeById_(id) {\n        await this.storage.deleteOne_(id);\n    }\n\n    async clearQueue_() {\n        await this.storage.deleteAll_();\n    }\n\n    async getBatchStatus_() {\n        const batchStats = await this.storage.findAll_({\n            $projection: [\n                'batchId',\n                this.storage.db.connector.queryCount(null, 'batchId'),\n            ],\n            $query: {\n                lockerId: { $exists: false },\n            },\n            $groupBy: ['batchId'],\n            $skipOrm: true,\n        });\n\n        let pending = 0;\n        let processing = 0;\n        const batches = {};\n\n        batchStats.forEach((batch) => {\n            if (batch[0] === '*') {\n                pending = batch[1];\n            } else {\n                batches[batch[0]] = batch[1];\n                processing += batch[1];\n            }\n        });\n\n        return {\n            numPending: pending,\n            numProcessing: processing,\n            batches,\n        };\n    }\n}\n\nmodule.exports = DeferredQueue;\n"]}