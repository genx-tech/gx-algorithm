{"version":3,"sources":["../src/FiniteStateMachine.js"],"sourcesContent":["const { eachAsync_ } = require('@genx/july');\nconst { InvalidArgument, Forbidden } = require('@genx/error');\n\n/**\n *\n * Action rule:\n *  desc: description of this transition\n *  when: pre transition condition check\n *  target: target state\n *  before: transforming before applying to the state\n *  after: trigger another action after transition\n */\n\nclass FiniteStateMachine {\n    static OK = [true];\n    static fail = (reason) => [false, reason];\n    static triggerAll_ =\n        (array) =>\n        (...args) =>\n            eachAsync_(array, (action_) => action_(...args));\n\n    static ifAny =\n        (array) =>\n        async (...args) => {\n            const l = array.length;\n            const reason = [];\n\n            for (let i = 0; i < l; i++) {\n                const checker_ = array[i];\n\n                const [allowed, disallowedReason] = await checker_(...args);\n                if (allowed) {\n                    return FiniteStateMachine.OK;\n                }\n\n                reason.push(disallowedReason);\n            }\n\n            return FiniteStateMachine.fail(\n                'None of the required conditions met.\\n' + reason.join('\\n')\n            );\n        };\n\n    static ifAll =\n        (array) =>\n        async (...args) => {\n            const l = array.length;\n\n            for (let i = 0; i < l; i++) {\n                const checker_ = array[i];\n\n                const [allowed, disallowedReason] = await checker_(...args);\n                if (!allowed) {\n                    return FiniteStateMachine.fail(disallowedReason);\n                }\n            }\n\n            return FiniteStateMachine.OK;\n        };\n\n    constructor(app, transitionTable, stateFetcher, stateUpdater) {\n        this.app = app;\n\n        this.transitions = transitionTable;\n        this.stateFetcher_ = stateFetcher;\n        this.stateUpdater_ = stateUpdater;\n    }\n\n    /**\n     * Get a list of allowed actions based on the current state.\n     * @param {*} context\n     * @param {boolean} withDisallowedReason\n     */\n    async getAllowedActions_(context, withDisallowedReason) {\n        const currentState = await this.stateFetcher_(this.app, context);\n\n        // from state\n        const transitions = this.transitions[currentState];\n        if (!transitions) {\n            throw new InvalidArgument(\n                `State \"${currentState}\" rules not found in the transition table.`\n            );\n        }\n\n        const allowed = [];\n        const disallowed = [];\n\n        await eachAsync_(transitions, async (rule, action) => {\n            const [actionAllowed, disallowedReason] =\n                (rule.when && (await rule.when(this.app, context))) ||\n                FiniteStateMachine.OK;\n\n            if (actionAllowed) {\n                allowed.push({\n                    action,\n                    desc: rule.desc,\n                    targetState: rule.target,\n                });\n            } else if (withDisallowedReason) {\n                disallowed.push({\n                    action,\n                    desc: rule.desc,\n                    targetState: rule.target,\n                    reason: disallowedReason,\n                });\n            }\n        });\n\n        const ret = {\n            allowed,\n        };\n\n        if (withDisallowedReason) {\n            ret.disallowed = disallowed;\n        }\n\n        return ret;\n    }\n\n    /**\n     * Perform the specified action.\n     * @param {*} action\n     * @param {*} context\n     * @param {*} payload\n     * @param {*} updateOpts\n     * @param {*} connOpts\n     */\n    async performAction_(action, context, payload, updateOpts, connOpts) {\n        const currentState = await this.stateFetcher_(\n            this.app,\n            context,\n            connOpts\n        );\n\n        const transitions = this.transitions[currentState];\n        if (!transitions) {\n            throw new InvalidArgument(\n                `State \"${currentState}\" rules not found in the transition table.`\n            );\n        }\n\n        const rule = transitions && transitions[action];\n        if (!rule) {\n            throw new Forbidden(\n                `Action \"${action}\" is not allowed in \"${currentState}\" state.`\n            );\n        }\n\n        if (rule.when) {\n            const [allowed, disallowedReason] = await rule.when(\n                this.app,\n                context\n            );\n            if (!allowed) {\n                throw new Forbidden(\n                    disallowedReason ||\n                        `The current state does not meet the requirements of \"${action}\" action.`\n                );\n            }\n        }\n\n        const entityUpdate = (rule.before &&\n            (await rule.before(this.app, context, payload))) || { ...payload };\n        const [actuallyUpdated, updateResult] = await this.stateUpdater_(\n            this.app,\n            context,\n            entityUpdate,\n            rule.target,\n            updateOpts,\n            connOpts\n        );\n\n        if (actuallyUpdated && rule.after) {\n            await rule.after(this.app, context, connOpts);\n        }\n\n        return updateResult;\n    }\n}\n\nmodule.exports = FiniteStateMachine;\n"],"names":["eachAsync_","require","InvalidArgument","Forbidden","FiniteStateMachine","OK","fail","reason","triggerAll_","array","args","action_","ifAny","l","length","i","checker_","allowed","disallowedReason","push","join","ifAll","constructor","app","transitionTable","stateFetcher","stateUpdater","transitions","stateFetcher_","stateUpdater_","getAllowedActions_","context","withDisallowedReason","currentState","disallowed","rule","action","actionAllowed","when","desc","targetState","target","ret","performAction_","payload","updateOpts","connOpts","entityUpdate","before","actuallyUpdated","updateResult","after","module","exports"],"mappings":"AAAA,MAAM,EAAEA,UAAU,CAAA,EAAE,GAAGC,OAAO,CAAC,YAAY,CAAC,AAAC;AAC7C,MAAM,EAAEC,eAAe,CAAA,EAAEC,SAAS,CAAA,EAAE,GAAGF,OAAO,CAAC,aAAa,CAAC,AAAC;AAE9D;;;;;;;;GAQG,CAEH,IAAA,AAAMG,kBAAkB,GAAxB,MAAMA,kBAAkB;IACpB,OAAOC,EAAE,GAAG;QAAC,IAAI;KAAC,CAAC;IACnB,OAAOC,IAAI,GAAG,CAACC,MAAM,GAAK;YAAC,KAAK;YAAEA,MAAM;SAAC,CAAC;IAC1C,OAAOC,WAAW,GACd,CAACC,KAAK,GACN,CAAIC,GAAAA,IAAI,GACJV,UAAU,CAACS,KAAK,EAAE,CAACE,OAAO,GAAKA,OAAO,IAAID,IAAI,CAAC,CAAC,CAAC;IAEzD,OAAOE,KAAK,GACR,CAACH,KAAK,GACN,OAAUC,GAAAA,IAAI,GAAK;YACf,MAAMG,CAAC,GAAGJ,KAAK,CAACK,MAAM,AAAC;YACvB,MAAMP,MAAM,GAAG,EAAE,AAAC;YAElB,IAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,CAAE;gBACxB,MAAMC,QAAQ,GAAGP,KAAK,CAACM,CAAC,CAAC,AAAC;gBAE1B,MAAM,CAACE,OAAO,EAAEC,gBAAgB,CAAC,GAAG,MAAMF,QAAQ,IAAIN,IAAI,CAAC,AAAC;gBAC5D,IAAIO,OAAO,EAAE;oBACT,OAAOb,kBAAkB,CAACC,EAAE,CAAC;iBAChC;gBAEDE,MAAM,CAACY,IAAI,CAACD,gBAAgB,CAAC,CAAC;aACjC;YAED,OAAOd,kBAAkB,CAACE,IAAI,CAC1B,wCAAwC,GAAGC,MAAM,CAACa,IAAI,CAAC,IAAI,CAAC,CAC/D,CAAC;SACL,CAAC;IAEN,OAAOC,KAAK,GACR,CAACZ,KAAK,GACN,OAAUC,GAAAA,IAAI,GAAK;YACf,MAAMG,CAAC,GAAGJ,KAAK,CAACK,MAAM,AAAC;YAEvB,IAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,CAAE;gBACxB,MAAMC,QAAQ,GAAGP,KAAK,CAACM,CAAC,CAAC,AAAC;gBAE1B,MAAM,CAACE,OAAO,EAAEC,gBAAgB,CAAC,GAAG,MAAMF,QAAQ,IAAIN,IAAI,CAAC,AAAC;gBAC5D,IAAI,CAACO,OAAO,EAAE;oBACV,OAAOb,kBAAkB,CAACE,IAAI,CAACY,gBAAgB,CAAC,CAAC;iBACpD;aACJ;YAED,OAAOd,kBAAkB,CAACC,EAAE,CAAC;SAChC,CAAC;IAENiB,YAAYC,GAAG,EAAEC,eAAe,EAAEC,YAAY,EAAEC,YAAY,CAAE;QAC1D,IAAI,CAACH,GAAG,GAAGA,GAAG,CAAC;QAEf,IAAI,CAACI,WAAW,GAAGH,eAAe,CAAC;QACnC,IAAI,CAACI,aAAa,GAAGH,YAAY,CAAC;QAClC,IAAI,CAACI,aAAa,GAAGH,YAAY,CAAC;KACrC;IAED;;;;OAIG,CACH,MAAMI,kBAAkB,CAACC,OAAO,EAAEC,oBAAoB,EAAE;QACpD,MAAMC,YAAY,GAAG,MAAM,IAAI,CAACL,aAAa,CAAC,IAAI,CAACL,GAAG,EAAEQ,OAAO,CAAC,AAAC;QAEjE,aAAa;QACb,MAAMJ,WAAW,GAAG,IAAI,CAACA,WAAW,CAACM,YAAY,CAAC,AAAC;QACnD,IAAI,CAACN,WAAW,EAAE;YACd,MAAM,IAAIzB,eAAe,CACrB,CAAC,OAAO,EAAE+B,YAAY,CAAC,0CAA0C,CAAC,CACrE,CAAC;SACL;QAED,MAAMhB,OAAO,GAAG,EAAE,AAAC;QACnB,MAAMiB,UAAU,GAAG,EAAE,AAAC;QAEtB,MAAMlC,UAAU,CAAC2B,WAAW,EAAE,OAAOQ,IAAI,EAAEC,MAAM,GAAK;YAClD,MAAM,CAACC,aAAa,EAAEnB,gBAAgB,CAAC,GACnC,AAACiB,IAAI,CAACG,IAAI,IAAK,MAAMH,IAAI,CAACG,IAAI,CAAC,IAAI,CAACf,GAAG,EAAEQ,OAAO,CAAC,IACjD3B,kBAAkB,CAACC,EAAE,AAAC;YAE1B,IAAIgC,aAAa,EAAE;gBACfpB,OAAO,CAACE,IAAI,CAAC;oBACTiB,MAAM;oBACNG,IAAI,EAAEJ,IAAI,CAACI,IAAI;oBACfC,WAAW,EAAEL,IAAI,CAACM,MAAM;iBAC3B,CAAC,CAAC;aACN,MAAM,IAAIT,oBAAoB,EAAE;gBAC7BE,UAAU,CAACf,IAAI,CAAC;oBACZiB,MAAM;oBACNG,IAAI,EAAEJ,IAAI,CAACI,IAAI;oBACfC,WAAW,EAAEL,IAAI,CAACM,MAAM;oBACxBlC,MAAM,EAAEW,gBAAgB;iBAC3B,CAAC,CAAC;aACN;SACJ,CAAC,CAAC;QAEH,MAAMwB,GAAG,GAAG;YACRzB,OAAO;SACV,AAAC;QAEF,IAAIe,oBAAoB,EAAE;YACtBU,GAAG,CAACR,UAAU,GAAGA,UAAU,CAAC;SAC/B;QAED,OAAOQ,GAAG,CAAC;KACd;IAED;;;;;;;OAOG,CACH,MAAMC,cAAc,CAACP,MAAM,EAAEL,OAAO,EAAEa,OAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAE;QACjE,MAAMb,YAAY,GAAG,MAAM,IAAI,CAACL,aAAa,CACzC,IAAI,CAACL,GAAG,EACRQ,OAAO,EACPe,QAAQ,CACX,AAAC;QAEF,MAAMnB,WAAW,GAAG,IAAI,CAACA,WAAW,CAACM,YAAY,CAAC,AAAC;QACnD,IAAI,CAACN,WAAW,EAAE;YACd,MAAM,IAAIzB,eAAe,CACrB,CAAC,OAAO,EAAE+B,YAAY,CAAC,0CAA0C,CAAC,CACrE,CAAC;SACL;QAED,MAAME,IAAI,GAAGR,WAAW,IAAIA,WAAW,CAACS,MAAM,CAAC,AAAC;QAChD,IAAI,CAACD,IAAI,EAAE;YACP,MAAM,IAAIhC,SAAS,CACf,CAAC,QAAQ,EAAEiC,MAAM,CAAC,qBAAqB,EAAEH,YAAY,CAAC,QAAQ,CAAC,CAClE,CAAC;SACL;QAED,IAAIE,IAAI,CAACG,IAAI,EAAE;YACX,MAAM,CAACrB,OAAO,EAAEC,gBAAgB,CAAC,GAAG,MAAMiB,IAAI,CAACG,IAAI,CAC/C,IAAI,CAACf,GAAG,EACRQ,OAAO,CACV,AAAC;YACF,IAAI,CAACd,OAAO,EAAE;gBACV,MAAM,IAAId,SAAS,CACfe,gBAAgB,IACZ,CAAC,qDAAqD,EAAEkB,MAAM,CAAC,SAAS,CAAC,CAChF,CAAC;aACL;SACJ;QAED,MAAMW,YAAY,GAAG,AAACZ,IAAI,CAACa,MAAM,IAC5B,MAAMb,IAAI,CAACa,MAAM,CAAC,IAAI,CAACzB,GAAG,EAAEQ,OAAO,EAAEa,OAAO,CAAC,IAAM;YAAE,GAAGA,OAAO;SAAE,AAAC;QACvE,MAAM,CAACK,eAAe,EAAEC,YAAY,CAAC,GAAG,MAAM,IAAI,CAACrB,aAAa,CAC5D,IAAI,CAACN,GAAG,EACRQ,OAAO,EACPgB,YAAY,EACZZ,IAAI,CAACM,MAAM,EACXI,UAAU,EACVC,QAAQ,CACX,AAAC;QAEF,IAAIG,eAAe,IAAId,IAAI,CAACgB,KAAK,EAAE;YAC/B,MAAMhB,IAAI,CAACgB,KAAK,CAAC,IAAI,CAAC5B,GAAG,EAAEQ,OAAO,EAAEe,QAAQ,CAAC,CAAC;SACjD;QAED,OAAOI,YAAY,CAAC;KACvB;CACJ;AAEDE,MAAM,CAACC,OAAO,GAAGjD,kBAAkB,CAAC"}