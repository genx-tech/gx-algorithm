"use strict";

require("source-map-support/register");

const TopoSort = require('./TopoSort');

const {
  _
} = require('rk-utils');

class Graph {
  constructor(json) {
    this.topo = new TopoSort();

    if (json) {
      this.nodes = _.cloneDeep(json.nodes);

      if (_.isEmpty(json.edges)) {
        _.forOwn(edges, (targets, source) => {
          this.topo.add(source, targets);
        });
      }

      this.startNodes = json.startNodes;
      this.endNodes = json.endNodes;
    } else {
      this.nodes = {};
    }
  }

  hasNode(key) {
    return key in this.nodes;
  }

  getNode(key) {
    return this.nodes[key];
  }

  setNode(key, value) {
    this.nodes[key] = value;
    return this;
  }

  setEdge(sourceNode, targetNode) {
    if (!this.hasNode(sourceNode)) {
      throw new Error(`Source node [${sourceNode}] not exists.`);
    }

    if (!this.hasNode(targetNode)) {
      throw new Error(`Target node [${targetNode}] not exists.`);
    }

    this.topo.add(sourceNode, targetNode);
    return this;
  }

  getTargetNodes(sourceNode) {
    return Array.from(this.topo.mapOfDependents[sourceNode]);
  }

  getSourceNodes(targetNode) {
    return Array.from(this.topo.mapOfDependencies[targetNode]);
  }

  calcStartEnd() {
    let seq = this.topo.sort();
    this.startNodes = _.takeWhile(seq, e => !this.topo.hasDependency(e));
    this.endNodes = _.takeRightWhile(seq, e => !this.topo.hasDependent(e));

    if (this.startNodes.length === 0) {
      this.startNodes = Object.keys(this.nodes);
    }

    if (this.endNodes.length === 0) {
      this.endNodes = Object.keys(this.nodes);
    }

    return this;
  }

  toJSON() {
    return {
      nodes: this.nodes,
      edges: _.mapValues(this.topo.mapOfDependents, nodes => Array.from(nodes)),
      startNodes: this.startNodes,
      endNodes: this.endNodes
    };
  }

}

module.exports = Graph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9HcmFwaC5qcyJdLCJuYW1lcyI6WyJUb3BvU29ydCIsInJlcXVpcmUiLCJfIiwiR3JhcGgiLCJjb25zdHJ1Y3RvciIsImpzb24iLCJ0b3BvIiwibm9kZXMiLCJjbG9uZURlZXAiLCJpc0VtcHR5IiwiZWRnZXMiLCJmb3JPd24iLCJ0YXJnZXRzIiwic291cmNlIiwiYWRkIiwic3RhcnROb2RlcyIsImVuZE5vZGVzIiwiaGFzTm9kZSIsImtleSIsImdldE5vZGUiLCJzZXROb2RlIiwidmFsdWUiLCJzZXRFZGdlIiwic291cmNlTm9kZSIsInRhcmdldE5vZGUiLCJFcnJvciIsImdldFRhcmdldE5vZGVzIiwiQXJyYXkiLCJmcm9tIiwibWFwT2ZEZXBlbmRlbnRzIiwiZ2V0U291cmNlTm9kZXMiLCJtYXBPZkRlcGVuZGVuY2llcyIsImNhbGNTdGFydEVuZCIsInNlcSIsInNvcnQiLCJ0YWtlV2hpbGUiLCJlIiwiaGFzRGVwZW5kZW5jeSIsInRha2VSaWdodFdoaWxlIiwiaGFzRGVwZW5kZW50IiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsInRvSlNPTiIsIm1hcFZhbHVlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFRRCxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNRSxLQUFOLENBQVk7QUFDUkMsRUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQU87QUFDZCxTQUFLQyxJQUFMLEdBQVksSUFBSU4sUUFBSixFQUFaOztBQUVBLFFBQUlLLElBQUosRUFBVTtBQUNOLFdBQUtFLEtBQUwsR0FBYUwsQ0FBQyxDQUFDTSxTQUFGLENBQVlILElBQUksQ0FBQ0UsS0FBakIsQ0FBYjs7QUFDQSxVQUFJTCxDQUFDLENBQUNPLE9BQUYsQ0FBVUosSUFBSSxDQUFDSyxLQUFmLENBQUosRUFBMkI7QUFD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LElBQUwsQ0FBVXVCLGVBQXRCLEVBQXdDdEIsS0FBRCxJQUFXb0IsS0FBSyxDQUFDQyxJQUFOLENBQVdyQixLQUFYLENBQWxELENBRko7QUFHSFEsTUFBQUEsVUFBVSxFQUFFLEtBQUtBLFVBSGQ7QUFJSEMsTUFBQUEsUUFBUSxFQUFFLEtBQUtBO0FBSlosS0FBUDtBQU1IOztBQXpFTzs7QUE0RVo2QixNQUFNLENBQUNDLE9BQVAsR0FBaUIzQyxLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRvcG9Tb3J0ID0gcmVxdWlyZSgnLi9Ub3BvU29ydCcpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5jbGFzcyBHcmFwaCB7XG4gICAgY29uc3RydWN0b3IoanNvbikge1xuICAgICAgICB0aGlzLnRvcG8gPSBuZXcgVG9wb1NvcnQoKTtcblxuICAgICAgICBpZiAoanNvbikge1xuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IF8uY2xvbmVEZWVwKGpzb24ubm9kZXMpO1xuICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShqc29uLmVkZ2VzKSkge1xuICAgICAgICAgICAgICAgIF8uZm9yT3duKGVkZ2VzLCAodGFyZ2V0cywgc291cmNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wby5hZGQoc291cmNlLCB0YXJnZXRzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhcnROb2RlcyA9IGpzb24uc3RhcnROb2RlcztcbiAgICAgICAgICAgIHRoaXMuZW5kTm9kZXMgPSBqc29uLmVuZE5vZGVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IHt9O1xuICAgICAgICB9ICAgICAgICBcbiAgICB9XG5cbiAgICBoYXNOb2RlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMubm9kZXM7XG4gICAgfVxuXG4gICAgZ2V0Tm9kZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXNba2V5XTtcbiAgICB9XG5cbiAgICBzZXROb2RlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5ub2Rlc1trZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldEVkZ2Uoc291cmNlTm9kZSwgdGFyZ2V0Tm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzTm9kZShzb3VyY2VOb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTb3VyY2Ugbm9kZSBbJHtzb3VyY2VOb2RlfV0gbm90IGV4aXN0cy5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaGFzTm9kZSh0YXJnZXROb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYXJnZXQgbm9kZSBbJHt0YXJnZXROb2RlfV0gbm90IGV4aXN0cy5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRvcG8uYWRkKHNvdXJjZU5vZGUsIHRhcmdldE5vZGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRUYXJnZXROb2Rlcyhzb3VyY2VOb2RlKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudG9wby5tYXBPZkRlcGVuZGVudHNbc291cmNlTm9kZV0pO1xuICAgIH1cblxuICAgIGdldFNvdXJjZU5vZGVzKHRhcmdldE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy50b3BvLm1hcE9mRGVwZW5kZW5jaWVzW3RhcmdldE5vZGVdKTtcbiAgICB9XG5cbiAgICBjYWxjU3RhcnRFbmQoKSB7XG4gICAgICAgIGxldCBzZXEgPSB0aGlzLnRvcG8uc29ydCgpO1xuICAgICAgICB0aGlzLnN0YXJ0Tm9kZXMgPSBfLnRha2VXaGlsZShzZXEsIGUgPT4gIXRoaXMudG9wby5oYXNEZXBlbmRlbmN5KGUpKTtcbiAgICAgICAgdGhpcy5lbmROb2RlcyA9IF8udGFrZVJpZ2h0V2hpbGUoc2VxLCBlID0+ICF0aGlzLnRvcG8uaGFzRGVwZW5kZW50KGUpKTtcblxuICAgICAgICBpZiAodGhpcy5zdGFydE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydE5vZGVzID0gT2JqZWN0LmtleXModGhpcy5ub2Rlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5lbmROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW5kTm9kZXMgPSBPYmplY3Qua2V5cyh0aGlzLm5vZGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGVzOiB0aGlzLm5vZGVzLFxuICAgICAgICAgICAgZWRnZXM6IF8ubWFwVmFsdWVzKHRoaXMudG9wby5tYXBPZkRlcGVuZGVudHMsIChub2RlcykgPT4gQXJyYXkuZnJvbShub2RlcykpLFxuICAgICAgICAgICAgc3RhcnROb2RlczogdGhpcy5zdGFydE5vZGVzLFxuICAgICAgICAgICAgZW5kTm9kZXM6IHRoaXMuZW5kTm9kZXNcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhcGg7Il19