{"version":3,"names":["DeferredQueue","constructor","app","storageModel","processTimeout","storage","model","genreateBatchId","Generators","require","shortid","postJobRequest_","job","deferedTime","now","due","plus","milliseconds","queuedJob","create_","JSON","stringify","dueAt","batchId","insertIgnore","popExpiredRequests_","expired","minus","lockerId","updated","updateMany_","$query","$neq","dispatchedAt","$lte","$exists","$retrieveUpdated","length","remove_","processDueRequests_","conditon","deleteMany_","removeById_","id","deleteOne_","clearQueue_","deleteAll_","getBatchStatus_","batchStats","findAll_","$projection","db","connector","queryCount","$groupBy","$skipOrm","pending","processing","batches","forEach","batch","numPending","numProcessing","module","exports"],"sources":["DeferredQueue.js"],"sourcesContent":["/**\n * id, job, dueAt, status, batchId (default '*'), dispatchedAt, lockFlag\n * uniqueKeys: [ job, batchId ]\n *\n * todo: automatically create db structure if not exist\n */\nclass DeferredQueue {\n    constructor(app, storageModel, processTimeout) {\n        this.app = app;\n        this.storage = this.app.model(storageModel);\n        this.processTimeout = processTimeout || 600000;\n    }\n\n    genreateBatchId() {\n        const { Generators } = require('@genx/data');\n        return Generators.shortid();\n    }\n\n    async postJobRequest_(job, deferedTime) {\n        const now = this.app.now();\n        const due = now.plus({ milliseconds: deferedTime || 3000 });\n\n        const queuedJob = await this.storage.create_(\n            {\n                job: JSON.stringify(job),\n                dueAt: due,\n                batchId: '*',\n            },\n            null,\n            {\n                insertIgnore: true,\n            }\n        );\n\n        return queuedJob;\n    }\n\n    async popExpiredRequests_() {\n        const expired = this.app\n            .now()\n            .minus({ milliseconds: this.processTimeout });\n        const lockerId = this.genreateBatchId();\n\n        const updated = await this.storage.updateMany_(\n            {\n                lockerId,\n            },\n            {\n                $query: {\n                    batchId: { $neq: '*' },\n                    dispatchedAt: { $lte: expired },\n                    lockerId: { $exists: false },\n                },\n                $retrieveUpdated: {\n                    $query: {\n                        lockerId,\n                    },\n                },\n            }\n        );\n\n        if (updated.length > 0) {\n            await this.remove_({ lockerId });\n        }\n\n        return updated;\n    }\n\n    async processDueRequests_() {\n        const now = this.app.now();\n        const batchId = this.genreateBatchId();\n\n        const updated = await this.storage.updateMany_(\n            {\n                batchId,\n                dispatchedAt: now,\n            },\n            {\n                $query: {\n                    batchId: '*',\n                    dueAt: { $lte: now },\n                },\n                $retrieveUpdated: {\n                    $query: {\n                        batchId,\n                    },\n                },\n            }\n        );\n\n        return updated;\n    }\n\n    async remove_(conditon) {\n        await this.storage.deleteMany_(conditon);\n    }\n\n    async removeById_(id) {\n        await this.storage.deleteOne_(id);\n    }\n\n    async clearQueue_() {\n        await this.storage.deleteAll_();\n    }\n\n    async getBatchStatus_() {\n        const batchStats = await this.storage.findAll_({\n            $projection: [\n                'batchId',\n                this.storage.db.connector.queryCount(null, 'batchId'),\n            ],\n            $query: {\n                lockerId: { $exists: false },\n            },\n            $groupBy: ['batchId'],\n            $skipOrm: true,\n        });\n\n        let pending = 0;\n        let processing = 0;\n        const batches = {};\n\n        batchStats.forEach((batch) => {\n            if (batch[0] === '*') {\n                pending = batch[1];\n            } else {\n                batches[batch[0]] = batch[1];\n                processing += batch[1];\n            }\n        });\n\n        return {\n            numPending: pending,\n            numProcessing: processing,\n            batches,\n        };\n    }\n}\n\nmodule.exports = DeferredQueue;\n"],"mappings":"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"}