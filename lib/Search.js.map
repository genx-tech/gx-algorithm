{"version":3,"sources":["../src/Search.js"],"sourcesContent":["/**\n * Perform a breadth-first search on a graph or tree.\n * @param {Object} root - The root node to start the search from.\n * @param {Function} visit - A function to call for each visited node, return true to end up the search.\n * @param {Function} getChildren - A function to get the children of a node.\n * @returns {Object} The node found\n */\nfunction bfs(root, visit, getChildren) {\n    const queue = Array.isArray(root) ? [...root] : [root];\n    const visited = new Set();\n    visited.add(root);\n\n    let found;\n\n    while (queue.length > 0) {\n        const node = queue.shift();\n        if (visit(node)) {\n            found = node;\n            break;\n        }\n\n        const children = getChildren(node);\n        children?.forEach((child) => {\n            if (!visited.has(child)) {\n                visited.add(child);\n                queue.push(child);\n            }\n        });\n    }\n\n    return found;\n}\n\n/**\n * Perform a depth-first search on a graph or tree.\n * @param {Object} root - The root node to start the search from.\n * @param {Function} visit - A function to call for each visited node, return true to end up the search.\n * @param {Function} getChildren - A function to get the children of a node.\n * @returns {Object} The node found\n */\nfunction dfs(root, visit, getChildren) {\n    const stack = [root];\n    const visited = new Set();\n\n    let found;\n\n    while (stack.length > 0) {\n        const node = stack.pop();\n\n        if (!visited.has(node)) {\n            if (visit(node)) {\n                found = node;\n                break;\n            }\n            visited.add(node);\n\n            const children = getChildren(node);\n            if (!children || children.length === 0) {\n                continue;\n            }\n\n            const [ leftNode, ...right ] = children;            \n\n            right.reverse().forEach((child) => {\n                stack.push(child);\n            });\n\n            stack.push(leftNode);\n        }\n    }\n\n    return found;\n}\n\nexports.bfs = bfs;\nexports.dfs = dfs;\n"],"names":["bfs","root","visit","getChildren","queue","Array","isArray","visited","Set","add","found","length","node","shift","children","forEach","child","has","push","dfs","stack","pop","leftNode","right","reverse","exports"],"mappings":"AAAA;;;;;;GAMG,CACH,SAASA,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAE;IACnC,MAAMC,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,GAAG;WAAIA,IAAI;KAAC,GAAG;QAACA,IAAI;KAAC,AAAC;IACvD,MAAMM,OAAO,GAAG,IAAIC,GAAG,EAAE,AAAC;IAC1BD,OAAO,CAACE,GAAG,CAACR,IAAI,CAAC,CAAC;IAElB,IAAIS,KAAK,AAAC;IAEV,MAAON,KAAK,CAACO,MAAM,GAAG,CAAC,CAAE;QACrB,MAAMC,IAAI,GAAGR,KAAK,CAACS,KAAK,EAAE,AAAC;QAC3B,IAAIX,KAAK,CAACU,IAAI,CAAC,EAAE;YACbF,KAAK,GAAGE,IAAI,CAAC;YACb,MAAM;SACT;QAED,MAAME,QAAQ,GAAGX,WAAW,CAACS,IAAI,CAAC,AAAC;QACnCE,QAAQ,aAARA,QAAQ,WAAS,GAAjBA,KAAAA,CAAiB,GAAjBA,QAAQ,CAAEC,OAAO,CAAC,CAACC,KAAK,GAAK;YACzB,IAAI,CAACT,OAAO,CAACU,GAAG,CAACD,KAAK,CAAC,EAAE;gBACrBT,OAAO,CAACE,GAAG,CAACO,KAAK,CAAC,CAAC;gBACnBZ,KAAK,CAACc,IAAI,CAACF,KAAK,CAAC,CAAC;aACrB;SACJ,CAAC,CAAC;KACN;IAED,OAAON,KAAK,CAAC;CAChB;AAED;;;;;;GAMG,CACH,SAASS,GAAG,CAAClB,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAE;IACnC,MAAMiB,KAAK,GAAG;QAACnB,IAAI;KAAC,AAAC;IACrB,MAAMM,OAAO,GAAG,IAAIC,GAAG,EAAE,AAAC;IAE1B,IAAIE,KAAK,AAAC;IAEV,MAAOU,KAAK,CAACT,MAAM,GAAG,CAAC,CAAE;QACrB,MAAMC,IAAI,GAAGQ,KAAK,CAACC,GAAG,EAAE,AAAC;QAEzB,IAAI,CAACd,OAAO,CAACU,GAAG,CAACL,IAAI,CAAC,EAAE;YACpB,IAAIV,KAAK,CAACU,IAAI,CAAC,EAAE;gBACbF,KAAK,GAAGE,IAAI,CAAC;gBACb,MAAM;aACT;YACDL,OAAO,CAACE,GAAG,CAACG,IAAI,CAAC,CAAC;YAElB,MAAME,QAAQ,GAAGX,WAAW,CAACS,IAAI,CAAC,AAAC;YACnC,IAAI,CAACE,QAAQ,IAAIA,QAAQ,CAACH,MAAM,KAAK,CAAC,EAAE;gBACpC,SAAS;aACZ;YAED,MAAM,CAAEW,QAAQ,EAAE,GAAGC,KAAK,CAAE,GAAGT,QAAQ,AAAC;YAExCS,KAAK,CAACC,OAAO,EAAE,CAACT,OAAO,CAAC,CAACC,KAAK,GAAK;gBAC/BI,KAAK,CAACF,IAAI,CAACF,KAAK,CAAC,CAAC;aACrB,CAAC,CAAC;YAEHI,KAAK,CAACF,IAAI,CAACI,QAAQ,CAAC,CAAC;SACxB;KACJ;IAED,OAAOZ,KAAK,CAAC;CAChB;AAEDe,OAAO,CAACzB,GAAG,GAAGA,GAAG,CAAC;AAClByB,OAAO,CAACN,GAAG,GAAGA,GAAG,CAAC"}