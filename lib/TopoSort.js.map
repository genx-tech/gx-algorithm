{"version":3,"sources":["../src/TopoSort.js"],"sourcesContent":["'use strict';\n\nconst { _ } = require('@genx/july');\n\n/**\n * @class\n */\nclass TopoSort {\n    /**\n     * Map of nodes to a set of nodes as dependents, <string, Set.<string>>\n     * @member {object}\n     */\n    mapOfDependents = {};\n\n    /** -\n     * Map of nodes to a set of nodes as dependencies, <string, Set.<string>>\n     * @member {object}\n     */\n    mapOfDependencies = {};\n\n    /**\n     * Add edges(or one edge, if values is non-array).\n     * @param {string} dependency - Incoming node (dependency)\n     * @param {string|array} dependents - Outgoing node or nodes\n     */\n    add(dependency, newDependents) {\n        // cast to array\n        newDependents = Array.isArray(newDependents)\n            ? newDependents\n            : [newDependents];\n\n        // get the existing dependents\n        const dependents = this.mapOfDependents[dependency];\n\n        newDependents.forEach((dependent) => {\n            // get the existing dependencies\n            const dependencies = this.mapOfDependencies[dependent];\n            if (!dependencies) {\n                // new set of dependencies\n                this.mapOfDependencies[dependent] = new Set([dependency]);\n            } else {\n                dependencies.add(dependency);\n            }\n\n            if (dependents) {\n                dependents.add(dependent);\n            }\n        });\n\n        if (!dependents) {\n            // new set of dependents\n            this.mapOfDependents[dependency] = new Set(newDependents);\n        }\n    }\n\n    hasDependency(node) {\n        return (\n            (this.mapOfDependencies[node] &&\n                this.mapOfDependencies[node].size > 0) ||\n            false\n        );\n    }\n\n    hasDependent(node) {\n        return (\n            (this.mapOfDependents[node] &&\n                this.mapOfDependents[node].size > 0) ||\n            false\n        );\n    }\n\n    /**\n     * Sort the graph. Circular graph throw an error with the circular nodes info.\n     * Implementation of http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\n     * Reference: http://courses.cs.washington.edu/courses/cse326/03wi/lectures/RaoLect20.pdf\n     * @return {Array} Sorted list\n     */\n    sort() {\n        // The list contains the final sorted nodes.\n        const l = [];\n\n        // Find all the initial 0 incoming edge nodes. If not found, this is is a circular graph, cannot be sorted.\n        const nodesWithDependents = Object.keys(this.mapOfDependents);\n        const nodesWithDependencies = Object.keys(this.mapOfDependencies);\n\n        const initialNodes = new Set(nodesWithDependents);\n        nodesWithDependencies.forEach((nodeHasDependency) =>\n            initialNodes.delete(nodeHasDependency)\n        );\n\n        // List of nodes with no unsorted dependencies\n        const s = [...initialNodes];\n\n        const allNodes = new Set(\n            nodesWithDependents.concat(nodesWithDependencies)\n        );\n\n        // number of unsorted nodes. If it is not zero at the end, this graph is a circular graph and cannot be sorted.\n        let unsorted = allNodes.size;\n\n        const numWithDependencies = _.mapValues(\n            this.mapOfDependencies,\n            (node) => node.size\n        );\n\n        while (s.length !== 0) {\n            const n = s.shift();\n            l.push(n);\n\n            // decrease unsorted count, node n has been sorted.\n            --unsorted;\n\n            // n node might have no dependency, so have to check it.\n            const dependentsOfN = this.mapOfDependents[n];\n            if (dependentsOfN) {\n                // decease n's adjacent nodes' incoming edges count. If any of them has 0 incoming edges, push them into s get them ready for detaching from the graph.\n                for (const dependentOfN of dependentsOfN) {\n                    if (--numWithDependencies[dependentOfN] === 0) {\n                        // no unsorted dependencies\n                        s.push(dependentOfN);\n                    }\n                }\n            }\n        }\n\n        // If there are unsorted nodes left, this graph is a circular graph and cannot be sorted.\n        // At least 1 circular dependency exist in the nodes with non-zero incoming edges.\n        if (unsorted !== 0) {\n            const circular = [];\n\n            for (const node in numWithDependencies) {\n                if (numWithDependencies[node] !== 0) {\n                    circular.push(node);\n                }\n            }\n\n            throw new Error(\n                'At least 1 circular dependency in nodes: \\n\\n' +\n                    circular.join('\\n') +\n                    '\\n\\nGraph cannot be sorted!'\n            );\n        }\n\n        return l;\n    }\n}\n\nmodule.exports = TopoSort;\n"],"names":["_","require","TopoSort","mapOfDependents","mapOfDependencies","add","dependency","newDependents","Array","isArray","dependents","forEach","dependent","dependencies","Set","hasDependency","node","size","hasDependent","sort","l","nodesWithDependents","Object","keys","nodesWithDependencies","initialNodes","nodeHasDependency","delete","s","allNodes","concat","unsorted","numWithDependencies","mapValues","length","n","shift","push","dependentsOfN","dependentOfN","circular","Error","join","module","exports"],"mappings":"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"}