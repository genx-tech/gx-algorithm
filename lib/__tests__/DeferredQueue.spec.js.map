{"version":3,"sources":["../../src/__tests__/DeferredQueue.spec.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst { cmd } = require('@genx/sys');\nconst { sleep_ } = require('@genx/july');\nconst App = require('@genx/app');\n\nconst DeferredQueue = require('../DeferredQueue');\n\nconst WORKING_DIR = path.resolve(__dirname, '../../test/DeferredQueue');\n\ndescribe('DeferredQueue', function () {\n    let cliApp, queue;\n\n    before(async function () {\n        await cmd.run_(\n            './node_modules/.bin/genx-eml build -c ./test/DeferredQueue/conf/app.default.json'\n        );\n        await cmd.run_(\n            './node_modules/.bin/genx-eml migrate -c ./test/DeferredQueue/conf/app.default.json -r'\n        );\n\n        cliApp = new App('test server', {\n            workingPath: WORKING_DIR,\n            workerName: 'app',\n            logger: {\n                level: 'debug',\n            },\n        });\n\n        await cliApp.start_();\n\n        queue = new DeferredQueue(cliApp, 'test.Queue');\n    });\n\n    after(async function () {\n        queue = null;\n        await cliApp.stop_();\n    });\n\n    it('empty job', async function () {\n        await queue.clearQueue_();\n\n        const jobs = await queue.processDueRequests_();\n        jobs.length.should.be.exactly(0);\n    });\n\n    it('post a job', async function () {\n        await queue.clearQueue_();\n\n        const job = await queue.postJobRequest_(\n            {\n                id: 'test',\n                payload: 20,\n            },\n            1000\n        );\n        should.exist(job.id);\n        job.batchId.should.be.exactly('*');\n\n        let jobs = await queue.processDueRequests_();\n        jobs.length.should.be.exactly(0);\n\n        await sleep_(1500);\n\n        jobs = await queue.processDueRequests_();\n        jobs.length.should.be.exactly(1);\n        should.exist(jobs[0].batchId);\n        jobs[0].batchId.should.not.eql('*');\n    });\n\n    it('only one pending job with same type', async function () {\n        await queue.clearQueue_();\n\n        await queue.postJobRequest_(\n            {\n                id: 'test',\n                payload: 20,\n            },\n            100\n        );\n\n        await queue.postJobRequest_(\n            {\n                id: 'test',\n                payload: 20,\n            },\n            100\n        );\n\n        await sleep_(500);\n\n        let jobs = await queue.processDueRequests_();\n        jobs.length.should.be.exactly(1);\n    });\n\n    it('no limit with different type or param', async function () {\n        await queue.clearQueue_();\n\n        await queue.postJobRequest_(\n            {\n                id: 'test',\n                payload: 20,\n            },\n            100\n        );\n\n        await queue.postJobRequest_(\n            {\n                id: 'test2',\n                payload: 20,\n            },\n            100\n        );\n\n        await queue.postJobRequest_(\n            {\n                id: 'test',\n                payload: 30,\n            },\n            100\n        );\n\n        await sleep_(500);\n\n        let jobs = await queue.processDueRequests_();\n        jobs.length.should.be.exactly(3);\n    });\n\n    it('expire', async function () {\n        await queue.clearQueue_();\n\n        queue.processTimeout = 500;\n\n        await queue.postJobRequest_(\n            {\n                id: 'test',\n                payload: 20,\n            },\n            500\n        );\n\n        await queue.postJobRequest_(\n            {\n                id: 'test2',\n                payload: 20,\n            },\n            3000\n        );\n\n        await queue.postJobRequest_(\n            {\n                id: 'test',\n                payload: 30,\n            },\n            500\n        );\n\n        let stats = await queue.getBatchStatus_();\n        stats.numPending.should.be.exactly(3);\n        stats.numProcessing.should.be.exactly(0);\n\n        await sleep_(1000);\n\n        await queue.processDueRequests_();\n\n        stats = await queue.getBatchStatus_();\n\n        stats.numPending.should.be.exactly(1);\n        stats.numProcessing.should.be.exactly(2);\n\n        let popped = await queue.popExpiredRequests_();\n        popped.should.be.exactly(0);\n\n        stats = await queue.getBatchStatus_();\n\n        stats.numPending.should.be.exactly(1);\n        stats.numProcessing.should.be.exactly(2);\n\n        await sleep_(1000);\n\n        popped = await queue.popExpiredRequests_();\n        popped.should.be.exactly(2);\n\n        stats = await queue.getBatchStatus_();\n        console.log(stats);\n\n        stats.numPending.should.be.exactly(1);\n        stats.numProcessing.should.be.exactly(0);\n\n        await sleep_(1500);\n\n        const jobs = await queue.processDueRequests_();\n        jobs.length.should.be.exactly(1);\n    });\n});\n"],"names":["path","require","cmd","sleep_","App","DeferredQueue","WORKING_DIR","resolve","__dirname","describe","cliApp","queue","before","run_","workingPath","workerName","logger","level","start_","after","stop_","it","clearQueue_","jobs","processDueRequests_","length","should","be","exactly","job","postJobRequest_","id","payload","exist","batchId","not","eql","processTimeout","stats","getBatchStatus_","numPending","numProcessing","popped","popExpiredRequests_","console","log"],"mappings":"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"}