{"version":3,"names":["_","require","Tree","Node","find","predicate","queue","cloneChildrenList","length","node","shift","concat","undefined","DataNode","children","constructor","data","size","append","parent","push","insert","i","splice","Math","max","remove","Error","reject","n","removeAtIndex","removed","KeyDataNode","Object","values","key","keys","findByKeyPath","value","appendDataByKeyPath","join","lastKey","pop","lastNode","each","getKeyPath","paths","curr","reverse","module","exports","KeyTree"],"sources":["Tree.js"],"sourcesContent":["const { _ } = require('@genx/july');\n\n/**\n * A closure function to be called to check the data of each node whether meets certain condition\n * @callback predicateFunction\n * @param {Node} node\n * @returns {boolean}\n */\n\n/**\n * Tree factory.\n * @param {Node} Node\n * @returns {Tree}\n */\nconst Tree = (Node) =>\n    class extends Node {\n        static Node = Node;\n\n        /**\n         * Find a node by BFS.\n         * @param {predicateFunction} predicate\n         */\n        find(predicate) {\n            let queue = Node.cloneChildrenList(this);\n\n            while (queue.length > 0) {\n                const node = queue.shift();\n\n                if (predicate(node)) return node;\n\n                queue = queue.concat(Node.cloneChildrenList(node));\n            }\n\n            return undefined;\n        }\n    };\n\n/**\n * Tree node with data property.\n * @class\n */\nclass DataNode {\n    static cloneChildrenList(node) {\n        return node.children.concat();\n    }\n\n    /**\n     * Array of children nodes.\n     * @member {array}\n     */\n    children = [];\n\n    /**\n     * Create a data node with given data.\n     * @param {*} data\n     */\n    constructor(data) {\n        /**\n         * Data property.\n         * @member {*}\n         */\n        this.data = data;\n    }\n\n    /**\n     * Number of nodes.\n     * @member {number}\n     */\n    get size() {\n        return this.children.length;\n    }\n\n    /**\n     * Append the given node to the end of the children list.\n     * @param {DataNode} node\n     */\n    append(node) {\n        node.parent = this;\n        this.children.push(node);\n    }\n\n    /**\n     * Insert the given node at specified index in the children list.\n     * @param {number} i\n     * @param {DataNode} node\n     */\n    insert(i, node) {\n        node.parent = this;\n        this.children.splice(Math.max(0, i), 0, node);\n    }\n\n    /**\n     * Remove the given node from the branch.\n     * @param {DataNode} node\n     * @returns {DataNode}\n     */\n    remove(node) {\n        if (node.parent !== this) {\n            throw new Error(\n                'Removing a node which is not a child of the current node.'\n            );\n        }\n\n        this.children = _.reject(this.children, (n) => n === node);\n        delete node.parent;\n\n        return node;\n    }\n\n    /**\n     * Remove the node at the given index from the branch.\n     * @param {number} i\n     * @returns {DataNode}\n     */\n    removeAtIndex(i) {\n        const [removed] = this.children.splice(i, 1);\n        if (removed) {\n            delete removed.parent;\n        }\n\n        return removed;\n    }\n}\n\n/**\n * Tree node with key property and data property.\n * @class\n */\nclass KeyDataNode {\n    static cloneChildrenList(node) {\n        return Object.values(node.children);\n    }\n\n    /**\n     * Map of keys to children nodes.\n     * @member {object}\n     */\n    children = {};\n\n    /**\n     * Create a key-data node with key and given data.\n     * @param {string} key\n     * @param {*} data\n     */\n    constructor(key, data) {\n        /**\n         * Node key.\n         * @member {string}\n         */\n        this.key = key;\n\n        /**\n         * Data property.\n         * @member {*}\n         */\n        this.data = data;\n    }\n\n    /**\n     * Number of nodes.\n     * @member {number}\n     */\n    get size() {\n        return Object.keys(this.children).length;\n    }\n\n    /**\n     * Fina a node by path being an array of keys.\n     * @param {array.<string>} keys\n     */\n    findByKeyPath(keys) {\n        keys = keys.concat();\n\n        if (keys.length === 0 || keys[0] !== this.key) {\n            return undefined;\n        }\n\n        let value = { children: { [this.key]: this } };\n\n        _.find(keys, (key) => {\n            value = value.children[key];\n            return typeof value === 'undefined';\n        });\n\n        return value;\n    }\n\n    /**\n     * Append data by path being an array of keys.\n     * @param {array.<string>} keys\n     * @param {*} data\n     * @returns {KeyDataNode} The newly created node containing the data.\n     */\n    appendDataByKeyPath(keys, data) {\n        keys = keys.concat();\n\n        if (keys.length === 0 || keys[0] !== this.key) {\n            throw new Error(\n                `The given key path \"${keys.join(\n                    ' / '\n                )}\" is not starting from the correct initial key \"${this.key}\".`\n            );\n        }\n\n        const lastKey = keys.pop();\n        let lastNode = { children: { [this.key]: this } };\n        let node;\n\n        _.each(keys, (key) => {\n            if (key in lastNode.children) {\n                lastNode = lastNode.children[key];\n            } else {\n                node = new KeyDataNode(key);\n                lastNode.append(node);\n                lastNode = node;\n            }\n        });\n\n        node = new KeyDataNode(lastKey, data);\n        lastNode.append(node);\n\n        return node;\n    }\n\n    /**\n     * Append the given node to the end of the children list.\n     * @param {KeyDataNode} node\n     */\n    append(node) {\n        node.parent = this;\n\n        if (node.key in this.children) {\n            throw new Error(`Duplicate node key: ${node.key}`);\n        }\n\n        this.children[node.key] = node;\n    }\n\n    /**\n     * Remove the given node from the branch.\n     * @param {KeyDataNode} node\n     */\n    remove(node) {\n        if (node.parent !== this || !(node.key in this.children)) {\n            throw new Error(\n                'Removing a node which is not a child of the current node.'\n            );\n        }\n\n        delete this.children[node.key];\n        delete node.parent;\n\n        return node;\n    }\n\n    /**\n     * Get key path of current node (a key chain from root to itself).\n     * @returns {array}\n     */\n    getKeyPath() {\n        const paths = [this.key];\n        let curr = this;\n\n        while (curr.parent) {\n            curr = curr.parent;\n            paths.push(curr.key);\n        }\n\n        return paths.reverse();\n    }\n}\n\nmodule.exports = {\n    Tree: Tree(DataNode),\n    KeyTree: Tree(KeyDataNode),\n};\n"],"mappings":"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"}