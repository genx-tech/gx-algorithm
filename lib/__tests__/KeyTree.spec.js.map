{"version":3,"sources":["../../src/__tests__/KeyTree.spec.js"],"sourcesContent":["'use strict';\n\nconst { KeyTree } = require('../Tree');\n\ndescribe('unit:tree:key-tree', function () {\n    let tree = new KeyTree('/', 'root node');\n    let node11 = new KeyTree.Node('l1-1', 'level 1 node 1');\n    let node12 = new KeyTree.Node('l1-2', 'level 1 node 2');\n    let node111 = new KeyTree.Node('l2-1', 'level 2 node 1');\n    let node121 = new KeyTree.Node('l2-2', 'level 2 node 2');\n    let node122 = new KeyTree.Node('l2-3', 'level 2 node 3');\n\n    tree.append(node11);\n    tree.append(node12);\n\n    node11.append(node111);\n\n    node12.append(node121);\n    node12.append(node122);\n\n    it('accessors', function () {\n        tree.size.should.be.exactly(2);\n    });\n\n    it('find', function () {\n        let node = tree.find((n) => n.key === 'l2-2');\n        should.exist(node);\n        node.data.should.be.exactly('level 2 node 2');\n\n        node = tree.find((n) => n.key === 'l2-4');\n        should.not.exist(node);\n\n        node = tree.findByKeyPath(['']);\n        should.not.exists(node);\n    });\n\n    it('cru', function () {\n        tree.children.should.have.keys(node11.key, node12.key);\n        node11.children.should.have.keys(node111.key);\n        node12.children.should.have.keys(node121.key, node122.key);\n\n        node111.getKeyPath().should.deepEqual(['/', 'l1-1', 'l2-1']);\n\n        let node = tree.findByKeyPath(['/', 'l1-2', 'l2-2']);\n        node.data.should.be.exactly('level 2 node 2');\n\n        node11.appendDataByKeyPath(\n            ['l1-1', 'l2-4', 'l3-1', 'l4-1'],\n            'new leaf'\n        );\n\n        node = tree.findByKeyPath(['/', 'l1-1', 'l2-4', 'l3-1', 'l4-1']);\n        node.data.should.be.exactly('new leaf');\n\n        node11.appendDataByKeyPath(\n            ['l1-1', 'l2-4', 'l3-1', 'l4-2'],\n            'new leaf 2'\n        );\n\n        node = tree.findByKeyPath(['/', 'l1-1', 'l2-4', 'l3-1', 'l4-2']);\n        node.data.should.be.exactly('new leaf 2');\n\n        should.throws(\n            () => tree.remove(node121),\n            'Removing a node which is not a child of the current node.'\n        );\n\n        tree.remove(node12);\n\n        node = tree.findByKeyPath(['/', 'l1-2', 'l2-2']);\n        should.not.exists(node);\n\n        should.throws(() => tree.append(node11), '`Duplicate node key: l1-1');\n    });\n});\n"],"names":["KeyTree","require","describe","tree","node11","Node","node12","node111","node121","node122","append","it","size","should","be","exactly","node","find","n","key","exist","data","not","findByKeyPath","exists","children","have","keys","getKeyPath","deepEqual","appendDataByKeyPath","throws","remove"],"mappings":"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"}