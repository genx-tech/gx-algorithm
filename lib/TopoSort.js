"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

class TopoSort {
  constructor() {
    this.mapOfDependents = {};
    this.mapOfDependencies = {};
  }

  add(dependency, newDependents) {
    newDependents = Array.isArray(newDependents) ? newDependents : [newDependents];
    let dependents = this.mapOfDependents[dependency];
    newDependents.forEach(dependent => {
      let dependencies = this.mapOfDependencies[dependent];

      if (!dependencies) {
        this.mapOfDependencies[dependent] = new Set([dependency]);
      } else {
        dependencies.add(dependency);
      }

      if (dependents) {
        dependents.add(dependent);
      }
    });

    if (!dependents) {
      this.mapOfDependents[dependency] = new Set(newDependents);
    }
  }

  hasDependency(node) {
    return this.mapOfDependencies[node] && this.mapOfDependencies[node].size > 0 || false;
  }

  hasDependent(node) {
    return this.mapOfDependents[node] && this.mapOfDependents[node].size > 0 || false;
  }

  sort() {
    let l = [];
    let nodesWithDependents = Object.keys(this.mapOfDependents);
    let nodesWithDependencies = Object.keys(this.mapOfDependencies);
    let initialNodes = new Set(nodesWithDependents);
    nodesWithDependencies.forEach(nodeHasDependency => initialNodes.delete(nodeHasDependency));
    let s = [...initialNodes];
    let allNodes = new Set(nodesWithDependents.concat(nodesWithDependencies));
    let unsorted = allNodes.size;

    let numWithDependencies = _.mapValues(this.mapOfDependencies, node => node.size);

    while (s.length !== 0) {
      let n = s.shift();
      l.push(n);
      --unsorted;
      let dependentsOfN = this.mapOfDependents[n];

      if (dependentsOfN) {
        for (let dependentOfN of dependentsOfN) {
          if (--numWithDependencies[dependentOfN] === 0) {
            s.push(dependentOfN);
          }
        }

        ;
      }
    }

    if (unsorted !== 0) {
      let circular = [];

      for (let node in numWithDependencies) {
        if (numWithDependencies[node] !== 0) {
          circular.push(node);
        }
      }

      throw new Error('At least 1 circular dependency in nodes: \n\n' + circular.join('\n') + '\n\nGraph cannot be sorted!');
    }

    return l;
  }

}

module.exports = TopoSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Ub3BvU29ydC5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIlRvcG9Tb3J0IiwibWFwT2ZEZXBlbmRlbnRzIiwibWFwT2ZEZXBlbmRlbmNpZXMiLCJhZGQiLCJkZXBlbmRlbmN5IiwibmV3RGVwZW5kZW50cyIsIkFycmF5IiwiaXNBcnJheSIsImRlcGVuZGVudHMiLCJmb3JFYWNoIiwiZGVwZW5kZW50IiwiZGVwZW5kZW5jaWVzIiwiU2V0IiwiaGFzRGVwZW5kZW5jeSIsIm5vZGUiLCJzaXplIiwiaGFzRGVwZW5kZW50Iiwic29ydCIsImwiLCJub2Rlc1dpdGhEZXBlbmRlbnRzIiwiT2JqZWN0Iiwia2V5cyIsIm5vZGVzV2l0aERlcGVuZGVuY2llcyIsImluaXRpYWxOb2RlcyIsIm5vZGVIYXNEZXBlbmRlbmN5IiwiZGVsZXRlIiwicyIsImFsbE5vZGVzIiwiY29uY2F0IiwidW5zb3J0ZWQiLCJudW1XaXRoRGVwZW5kZW5jaWVzIiwibWFwVmFsdWVzIiwibGVuZ3RoIiwibiIsInNoaWZ0IiwicHVzaCIsImRlcGVuZGVudHNPZk4iLCJkZXBlbmRlbnRPZk4iLCJjaXJjdWxhciIsIkVycm9yIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUtBLE1BQU1DLFFBQU4sQ0FBZTtBQUFBO0FBQUEsU0FLWEMsZUFMVyxHQUtPLEVBTFA7QUFBQSxTQVdYQyxpQkFYVyxHQVdTLEVBWFQ7QUFBQTs7QUFrQlhDLEVBQUFBLEdBQUcsQ0FBQ0MsVUFBRCxFQUFhQyxhQUFiLEVBQTRCO0FBRTNCQSxJQUFBQSxhQUFhLEdBQUdDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixhQUFkLElBQStCQSxhQUEvQixHQUErQyxDQUFFQSxhQUFGLENBQS9EO0FBR0EsUUFBSUcsVUFBVSxHQUFHLEtBQUtQLGVBQUwsQ0FBcUJHLFVBQXJC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c0M7QUFDbEMsWUFBSUEsbUJBQW1CLENBQUNoQixJQUFELENBQW5CLEtBQThCLENBQWxDLEVBQW9DO0FBQ2hDd0IsVUFBQUEsUUFBUSxDQUFDSCxJQUFULENBQWNyQixJQUFkO0FBQ0g7QUFDSjs7QUFFRCxZQUFNLElBQUl5QixLQUFKLENBQVUsa0RBQWtERCxRQUFRLENBQUNFLElBQVQsQ0FBYyxJQUFkLENBQWxELEdBQXdFLDZCQUFsRixDQUFOO0FBQ0g7O0FBRUQsV0FBT3RCLENBQVA7QUFDSDs7QUF0SFU7O0FBeUhmdUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCMUMsUUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG4vKipcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBUb3BvU29ydCB7ICAgIFxuICAgIC8qKlxuICAgICAqIE1hcCBvZiBub2RlcyB0byBhIHNldCBvZiBub2RlcyBhcyBkZXBlbmRlbnRzLCA8c3RyaW5nLCBTZXQuPHN0cmluZz4+XG4gICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAqL1xuICAgIG1hcE9mRGVwZW5kZW50cyA9IHt9O1xuXG4gICAgLyoqLVxuICAgICAqIE1hcCBvZiBub2RlcyB0byBhIHNldCBvZiBub2RlcyBhcyBkZXBlbmRlbmNpZXMsIDxzdHJpbmcsIFNldC48c3RyaW5nPj5cbiAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICovXG4gICAgbWFwT2ZEZXBlbmRlbmNpZXMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBlZGdlcyhvciBvbmUgZWRnZSwgaWYgdmFsdWVzIGlzIG5vbi1hcnJheSkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRlcGVuZGVuY3kgLSBJbmNvbWluZyBub2RlIChkZXBlbmRlbmN5KVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSBkZXBlbmRlbnRzIC0gT3V0Z29pbmcgbm9kZSBvciBub2Rlc1xuICAgICAqL1xuICAgIGFkZChkZXBlbmRlbmN5LCBuZXdEZXBlbmRlbnRzKSB7XG4gICAgICAgIC8vY2FzdCB0byBhcnJheVxuICAgICAgICBuZXdEZXBlbmRlbnRzID0gQXJyYXkuaXNBcnJheShuZXdEZXBlbmRlbnRzKSA/IG5ld0RlcGVuZGVudHMgOiBbIG5ld0RlcGVuZGVudHMgXTtcblxuICAgICAgICAvL2dldCB0aGUgZXhpc3RpbmcgZGVwZW5kZW50c1xuICAgICAgICBsZXQgZGVwZW5kZW50cyA9IHRoaXMubWFwT2ZEZXBlbmRlbnRzW2RlcGVuZGVuY3ldO1xuXG4gICAgICAgIG5ld0RlcGVuZGVudHMuZm9yRWFjaChkZXBlbmRlbnQgPT4ge1xuICAgICAgICAgICAgLy9nZXQgdGhlIGV4aXN0aW5nIGRlcGVuZGVuY2llc1xuICAgICAgICAgICAgbGV0IGRlcGVuZGVuY2llcyA9IHRoaXMubWFwT2ZEZXBlbmRlbmNpZXNbZGVwZW5kZW50XTtcbiAgICAgICAgICAgIGlmICghZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgICAgICAgLy9uZXcgc2V0IG9mIGRlcGVuZGVuY2llc1xuICAgICAgICAgICAgICAgIHRoaXMubWFwT2ZEZXBlbmRlbmNpZXNbZGVwZW5kZW50XSA9IG5ldyBTZXQoWyBkZXBlbmRlbmN5IF0pOyBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLmFkZChkZXBlbmRlbmN5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRlcGVuZGVudHMpIHtcbiAgICAgICAgICAgICAgICBkZXBlbmRlbnRzLmFkZChkZXBlbmRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWRlcGVuZGVudHMpIHtcbiAgICAgICAgICAgIC8vbmV3IHNldCBvZiBkZXBlbmRlbnRzXG4gICAgICAgICAgICB0aGlzLm1hcE9mRGVwZW5kZW50c1tkZXBlbmRlbmN5XSA9IG5ldyBTZXQobmV3RGVwZW5kZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNEZXBlbmRlbmN5KG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm1hcE9mRGVwZW5kZW5jaWVzW25vZGVdICYmIHRoaXMubWFwT2ZEZXBlbmRlbmNpZXNbbm9kZV0uc2l6ZSA+IDApIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIGhhc0RlcGVuZGVudChub2RlKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5tYXBPZkRlcGVuZGVudHNbbm9kZV0gJiYgdGhpcy5tYXBPZkRlcGVuZGVudHNbbm9kZV0uc2l6ZSA+IDApIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNvcnQgdGhlIGdyYXBoLiBDaXJjdWxhciBncmFwaCB0aHJvdyBhbiBlcnJvciB3aXRoIHRoZSBjaXJjdWxhciBub2RlcyBpbmZvLlxuICAgICAqIEltcGxlbWVudGF0aW9uIG9mIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVG9wb2xvZ2ljYWxfc29ydGluZyNBbGdvcml0aG1zXG4gICAgICogUmVmZXJlbmNlOiBodHRwOi8vY291cnNlcy5jcy53YXNoaW5ndG9uLmVkdS9jb3Vyc2VzL2NzZTMyNi8wM3dpL2xlY3R1cmVzL1Jhb0xlY3QyMC5wZGZcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gU29ydGVkIGxpc3RcbiAgICAgKi9cbiAgICBzb3J0KCkgeyAgICAgICAgXG4gICAgICAgIC8vIFRoZSBsaXN0IGNvbnRhaW5zIHRoZSBmaW5hbCBzb3J0ZWQgbm9kZXMuXG4gICAgICAgIGxldCBsID0gW107XG5cbiAgICAgICAgLy8gRmluZCBhbGwgdGhlIGluaXRpYWwgMCBpbmNvbWluZyBlZGdlIG5vZGVzLiBJZiBub3QgZm91bmQsIHRoaXMgaXMgaXMgYSBjaXJjdWxhciBncmFwaCwgY2Fubm90IGJlIHNvcnRlZC4gICAgICAgICBcbiAgICAgICAgbGV0IG5vZGVzV2l0aERlcGVuZGVudHMgPSBPYmplY3Qua2V5cyh0aGlzLm1hcE9mRGVwZW5kZW50cyk7XG4gICAgICAgIGxldCBub2Rlc1dpdGhEZXBlbmRlbmNpZXMgPSBPYmplY3Qua2V5cyh0aGlzLm1hcE9mRGVwZW5kZW5jaWVzKTtcblxuICAgICAgICBsZXQgaW5pdGlhbE5vZGVzID0gbmV3IFNldChub2Rlc1dpdGhEZXBlbmRlbnRzKTtcbiAgICAgICAgbm9kZXNXaXRoRGVwZW5kZW5jaWVzLmZvckVhY2gobm9kZUhhc0RlcGVuZGVuY3kgPT4gaW5pdGlhbE5vZGVzLmRlbGV0ZShub2RlSGFzRGVwZW5kZW5jeSkpO1xuXG4gICAgICAgIC8vIExpc3Qgb2Ygbm9kZXMgd2l0aCBubyB1bnNvcnRlZCBkZXBlbmRlbmNpZXNcbiAgICAgICAgbGV0IHMgPSBbLi4uaW5pdGlhbE5vZGVzXTtcblxuICAgICAgICBsZXQgYWxsTm9kZXMgPSBuZXcgU2V0KG5vZGVzV2l0aERlcGVuZGVudHMuY29uY2F0KG5vZGVzV2l0aERlcGVuZGVuY2llcykpO1xuXG4gICAgICAgIC8vIG51bWJlciBvZiB1bnNvcnRlZCBub2Rlcy4gSWYgaXQgaXMgbm90IHplcm8gYXQgdGhlIGVuZCwgdGhpcyBncmFwaCBpcyBhIGNpcmN1bGFyIGdyYXBoIGFuZCBjYW5ub3QgYmUgc29ydGVkLlxuICAgICAgICBsZXQgdW5zb3J0ZWQgPSBhbGxOb2Rlcy5zaXplO1xuXG4gICAgICAgIGxldCBudW1XaXRoRGVwZW5kZW5jaWVzID0gXy5tYXBWYWx1ZXModGhpcy5tYXBPZkRlcGVuZGVuY2llcywgbm9kZSA9PiBub2RlLnNpemUpO1xuXG4gICAgICAgIHdoaWxlIChzLmxlbmd0aCAhPT0gMCl7XG4gICAgICAgICAgICBsZXQgbiA9IHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGwucHVzaChuKTtcblxuICAgICAgICAgICAgLy8gZGVjcmVhc2UgdW5zb3J0ZWQgY291bnQsIG5vZGUgbiBoYXMgYmVlbiBzb3J0ZWQuXG4gICAgICAgICAgICAtLXVuc29ydGVkO1xuXG4gICAgICAgICAgICAvLyBuIG5vZGUgbWlnaHQgaGF2ZSBubyBkZXBlbmRlbmN5LCBzbyBoYXZlIHRvIGNoZWNrIGl0LlxuICAgICAgICAgICAgbGV0IGRlcGVuZGVudHNPZk4gPSB0aGlzLm1hcE9mRGVwZW5kZW50c1tuXTtcbiAgICAgICAgICAgIGlmIChkZXBlbmRlbnRzT2ZOKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gZGVjZWFzZSBuJ3MgYWRqYWNlbnQgbm9kZXMnIGluY29taW5nIGVkZ2VzIGNvdW50LiBJZiBhbnkgb2YgdGhlbSBoYXMgMCBpbmNvbWluZyBlZGdlcywgcHVzaCB0aGVtIGludG8gcyBnZXQgdGhlbSByZWFkeSBmb3IgZGV0YWNoaW5nIGZyb20gdGhlIGdyYXBoLlxuICAgICAgICAgICAgICAgIGZvciAobGV0IGRlcGVuZGVudE9mTiBvZiBkZXBlbmRlbnRzT2ZOKSB7ICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICBpZiAoLS1udW1XaXRoRGVwZW5kZW5jaWVzW2RlcGVuZGVudE9mTl0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm8gdW5zb3J0ZWQgZGVwZW5kZW5jaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnB1c2goZGVwZW5kZW50T2ZOKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgdW5zb3J0ZWQgbm9kZXMgbGVmdCwgdGhpcyBncmFwaCBpcyBhIGNpcmN1bGFyIGdyYXBoIGFuZCBjYW5ub3QgYmUgc29ydGVkLlxuICAgICAgICAvLyBBdCBsZWFzdCAxIGNpcmN1bGFyIGRlcGVuZGVuY3kgZXhpc3QgaW4gdGhlIG5vZGVzIHdpdGggbm9uLXplcm8gaW5jb21pbmcgZWRnZXMuXG4gICAgICAgIGlmICh1bnNvcnRlZCAhPT0gMCkge1xuICAgICAgICAgICAgbGV0IGNpcmN1bGFyID0gW107XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAobGV0IG5vZGUgaW4gbnVtV2l0aERlcGVuZGVuY2llcykge1xuICAgICAgICAgICAgICAgIGlmIChudW1XaXRoRGVwZW5kZW5jaWVzW25vZGVdICE9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgY2lyY3VsYXIucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXQgbGVhc3QgMSBjaXJjdWxhciBkZXBlbmRlbmN5IGluIG5vZGVzOiBcXG5cXG4nICsgY2lyY3VsYXIuam9pbignXFxuJykgKyAnXFxuXFxuR3JhcGggY2Fubm90IGJlIHNvcnRlZCEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUb3BvU29ydDsiXX0=