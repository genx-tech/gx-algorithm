"use strict";

require("source-map-support/register");

class DeferredQueue {
  constructor(app, storageModel, processTimeout) {
    this.app = app;
    this.storage = this.app.model(storageModel);
    this.processTimeout = processTimeout || 600000;
  }

  genreateBatchId() {
    const {
      Generators
    } = require('@genx/data');

    return Generators.shortid();
  }

  async postFutureJob_(job, deferedTime) {
    const now = this.app.now();
    const due = now.plus({
      milliseconds: deferedTime || 3000
    });
    const queuedJob = await this.storage.create_({
      job: JSON.stringify(job),
      dueAt: due,
      batchId: '*'
    }, null, {
      insertIgnore: true
    });
    return queuedJob;
  }

  async popExpiredJobs_() {
    const expired = this.app.now().minus({
      milliseconds: this.processTimeout
    });
    const batchId = this.genreateBatchId();
    const updated = await this.storage.updateMany_({
      batchId,
      lockFlag: true
    }, {
      $query: {
        batchId: {
          $neq: '*'
        },
        dispatchedAt: {
          $lte: expired
        },
        lockFlag: {
          $neq: true
        }
      },
      $retrieveUpdated: {
        $query: {
          batchId
        }
      }
    });
    await this.removeByBatch_(batchId);
    return updated;
  }

  async markDueJobs_() {
    const now = this.app.now();
    const batchId = this.genreateBatchId();
    const updated = await this.storage.updateMany_({
      batchId,
      dispatchedAt: now
    }, {
      $query: {
        batchId: '*',
        dueAt: {
          $lte: now
        }
      },
      $retrieveUpdated: {
        $query: {
          batchId
        }
      }
    });
    return updated;
  }

  async removeByBatch_(batchId) {
    await this.storage.deleteMany_({
      batchId
    });
  }

  async removeById_(id) {
    await this.storage.deleteOne_(id);
  }

  async clearQueue_() {
    await this.storage.deleteAll_();
  }

  async getBatchStatus_() {
    const batchStats = await this.storage.findAll_({
      $projection: ['batchId', this.storage.db.connector.queryCount(null, "batchId")],
      $query: {
        lockFlag: {
          $neq: 1
        }
      },
      $groupBy: ['batchId'],
      $skipOrm: true
    });
    console.log(batchStats);
    let pending = 0,
        processing = 0,
        batches = {};
    batchStats.forEach(batch => {
      if (batch[0] === '*') {
        pending = batch[1];
      } else {
        batches[batch[0]] = batch[1];
        processing += batch[1];
      }
    });
    return {
      numPending: pending,
      numProcessing: processing,
      batches
    };
  }

}

module.exports = DeferredQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EZWZlcnJlZFF1ZXVlLmpzIl0sIm5hbWVzIjpbIkRlZmVycmVkUXVldWUiLCJjb25zdHJ1Y3RvciIsImFwcCIsInN0b3JhZ2VNb2RlbCIsInByb2Nlc3NUaW1lb3V0Iiwic3RvcmFnZSIsIm1vZGVsIiwiZ2VucmVhdGVCYXRjaElkIiwiR2VuZXJhdG9ycyIsInJlcXVpcmUiLCJzaG9ydGlkIiwicG9zdEZ1dHVyZUpvYl8iLCJqb2IiLCJkZWZlcmVkVGltZSIsIm5vdyIsImR1ZSIsInBsdXMiLCJtaWxsaXNlY29uZHMiLCJxdWV1ZWRKb2IiLCJjcmVhdGVfIiwiSlNPTiIsInN0cmluZ2lmeSIsImR1ZUF0IiwiYmF0Y2hJZCIsImluc2VydElnbm9yZSIsInBvcEV4cGlyZWRKb2JzXyIsImV4cGlyZWQiLCJtaW51cyIsInVwZGF0ZWQiLCJ1cGRhdGVNYW55XyIsImxvY2tGbGFnIiwiJHF1ZXJ5IiwiJG5lcSIsImRpc3BhdGNoZWRBdCIsIiRsdGUiLCIkcmV0cmlldmVVcGRhdGVkIiwicmVtb3ZlQnlCYXRjaF8iLCJtYXJrRHVlSm9ic18iLCJkZWxldGVNYW55XyIsInJlbW92ZUJ5SWRfIiwiaWQiLCJkZWxldGVPbmVfIiwiY2xlYXJRdWV1ZV8iLCJkZWxldGVBbGxfIiwiZ2V0QmF0Y2hTdGF0dXNfIiwiYmF0Y2hTdGF0cyIsImZpbmRBbGxfIiwiJHByb2plY3Rpb24iLCJkYiIsImNvbm5lY3RvciIsInF1ZXJ5Q291bnQiLCIkZ3JvdXBCeSIsIiRza2lwT3JtIiwiY29uc29sZSIsImxvZyIsInBlbmRpbmciLCJwcm9jZXNzaW5nIiwiYmF0Y2hlcyIsImZvckVhY2giLCJiYXRjaCIsIm51bVBlbmRpbmciLCJudW1Qcm9jZXNzaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQU9BLE1BQU1BLGFBQU4sQ0FBb0I7QUFDaEJDLEVBQUFBLFdBQVcsQ0FBQ0MsR0FBRCxFQUFNQyxZQUFOLEVBQW9CQyxjQUFwQixFQUFvQztBQUMz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QUssQ0FBQyxDQUFELENBQU4sQ0FBUCxHQUFvQkEsS0FBSyxDQUFDLENBQUQsQ0FBekI7QUFDQUgsUUFBQUEsVUFBVSxJQUFJRyxLQUFLLENBQUMsQ0FBRCxDQUFuQjtBQUNIO0FBQ0osS0FQRDtBQVNBLFdBQU87QUFDSEMsTUFBQUEsVUFBVSxFQUFFTCxPQURUO0FBRUhNLE1BQUFBLGFBQWEsRUFBRUwsVUFGWjtBQUdIQyxNQUFBQTtBQUhHLEtBQVA7QUFLSDs7QUF2SGU7O0FBMEhwQkssTUFBTSxDQUFDQyxPQUFQLEdBQWlCL0QsYUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogaWQsIGpvYiwgZHVlQXQsIHN0YXR1cywgYmF0Y2hJZCAoZGVmYXVsdCAnKicpXG4gKiB1bmlxdWVLZXlzOiBbIGpvYiwgYmF0Y2hJZCBdXG4gKiBcbiAqIHRvZG86IGF1dG9tYXRpY2FsbHkgY3JlYXRlIGRiIHN0cnVjdHVyZSBpZiBub3QgZXhpc3RcbiAqL1xuY2xhc3MgRGVmZXJyZWRRdWV1ZSB7ICAgIFxuICAgIGNvbnN0cnVjdG9yKGFwcCwgc3RvcmFnZU1vZGVsLCBwcm9jZXNzVGltZW91dCkge1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gdGhpcy5hcHAubW9kZWwoc3RvcmFnZU1vZGVsKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzVGltZW91dCA9IHByb2Nlc3NUaW1lb3V0IHx8IDYwMDAwMDtcbiAgICB9XG5cbiAgICBnZW5yZWF0ZUJhdGNoSWQoKSB7XG4gICAgICAgIGNvbnN0IHsgR2VuZXJhdG9ycyB9ID0gcmVxdWlyZSgnQGdlbngvZGF0YScpO1xuICAgICAgICByZXR1cm4gR2VuZXJhdG9ycy5zaG9ydGlkKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgcG9zdEZ1dHVyZUpvYl8oam9iLCBkZWZlcmVkVGltZSkge1xuICAgICAgICBjb25zdCBub3cgPSB0aGlzLmFwcC5ub3coKTtcbiAgICAgICAgY29uc3QgZHVlID0gbm93LnBsdXMoeyBtaWxsaXNlY29uZHM6IGRlZmVyZWRUaW1lIHx8IDMwMDAgfSk7XG5cbiAgICAgICAgY29uc3QgcXVldWVkSm9iID0gYXdhaXQgdGhpcy5zdG9yYWdlLmNyZWF0ZV8oe1xuICAgICAgICAgICAgam9iOiBKU09OLnN0cmluZ2lmeShqb2IpLFxuICAgICAgICAgICAgZHVlQXQ6IGR1ZSxcbiAgICAgICAgICAgIGJhdGNoSWQ6ICcqJ1xuICAgICAgICB9LCBudWxsLCB7XG4gICAgICAgICAgICBpbnNlcnRJZ25vcmU6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHF1ZXVlZEpvYjtcbiAgICB9XG5cbiAgICBhc3luYyBwb3BFeHBpcmVkSm9ic18oKSB7XG4gICAgICAgIGNvbnN0IGV4cGlyZWQgPSB0aGlzLmFwcC5ub3coKS5taW51cyh7IG1pbGxpc2Vjb25kczogdGhpcy5wcm9jZXNzVGltZW91dCB9KTtcbiAgICAgICAgY29uc3QgYmF0Y2hJZCA9IHRoaXMuZ2VucmVhdGVCYXRjaElkKCk7XG5cbiAgICAgICAgY29uc3QgdXBkYXRlZCA9IGF3YWl0IHRoaXMuc3RvcmFnZS51cGRhdGVNYW55Xyh7ICAgICAgICAgICAgXG4gICAgICAgICAgICBiYXRjaElkLFxuICAgICAgICAgICAgbG9ja0ZsYWc6IHRydWVcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgJHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgYmF0Y2hJZDogeyAkbmVxOiAnKicgfSxcbiAgICAgICAgICAgICAgICBkaXNwYXRjaGVkQXQ6IHsgJGx0ZTogZXhwaXJlZCB9LFxuICAgICAgICAgICAgICAgIGxvY2tGbGFnOiB7ICRuZXE6IHRydWUgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRyZXRyaWV2ZVVwZGF0ZWQ6IHtcbiAgICAgICAgICAgICAgICAkcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgYmF0Y2hJZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5yZW1vdmVCeUJhdGNoXyhiYXRjaElkKTtcblxuICAgICAgICByZXR1cm4gdXBkYXRlZDtcbiAgICB9XG5cbiAgICBhc3luYyBtYXJrRHVlSm9ic18oKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IHRoaXMuYXBwLm5vdygpO1xuICAgICAgICBjb25zdCBiYXRjaElkID0gdGhpcy5nZW5yZWF0ZUJhdGNoSWQoKTsgICAgICAgIFxuXG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBhd2FpdCB0aGlzLnN0b3JhZ2UudXBkYXRlTWFueV8oeyAgICAgICAgICAgIFxuICAgICAgICAgICAgYmF0Y2hJZCxcbiAgICAgICAgICAgIGRpc3BhdGNoZWRBdDogbm93XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICRxdWVyeToge1xuICAgICAgICAgICAgICAgIGJhdGNoSWQ6ICcqJyxcbiAgICAgICAgICAgICAgICBkdWVBdDogeyAkbHRlOiBub3cgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRyZXRyaWV2ZVVwZGF0ZWQ6IHtcbiAgICAgICAgICAgICAgICAkcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgYmF0Y2hJZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHVwZGF0ZWQ7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVtb3ZlQnlCYXRjaF8oYmF0Y2hJZCkge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2UuZGVsZXRlTWFueV8oeyBiYXRjaElkIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHJlbW92ZUJ5SWRfKGlkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZS5kZWxldGVPbmVfKGlkKTtcbiAgICB9XG5cbiAgICBhc3luYyBjbGVhclF1ZXVlXygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlLmRlbGV0ZUFsbF8oKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRCYXRjaFN0YXR1c18oKSB7XG4gICAgICAgIGNvbnN0IGJhdGNoU3RhdHMgPSBhd2FpdCB0aGlzLnN0b3JhZ2UuZmluZEFsbF8oe1xuICAgICAgICAgICAgJHByb2plY3Rpb246IFtcbiAgICAgICAgICAgICAgICAnYmF0Y2hJZCcsXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlLmRiLmNvbm5lY3Rvci5xdWVyeUNvdW50KG51bGwsIFwiYmF0Y2hJZFwiKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICRxdWVyeToge1xuICAgICAgICAgICAgICAgIGxvY2tGbGFnOiB7ICRuZXE6IDEgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRncm91cEJ5OiBbXG4gICAgICAgICAgICAgICAgJ2JhdGNoSWQnXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJHNraXBPcm06IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coYmF0Y2hTdGF0cyk7XG5cbiAgICAgICAgbGV0IHBlbmRpbmcgPSAwLCBwcm9jZXNzaW5nID0gMCwgYmF0Y2hlcyA9IHt9O1xuXG4gICAgICAgIGJhdGNoU3RhdHMuZm9yRWFjaChiYXRjaCA9PiB7XG4gICAgICAgICAgICBpZiAoYmF0Y2hbMF0gPT09ICcqJykge1xuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBiYXRjaFsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmF0Y2hlc1tiYXRjaFswXV0gPSBiYXRjaFsxXTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzaW5nICs9IGJhdGNoWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbnVtUGVuZGluZzogcGVuZGluZyxcbiAgICAgICAgICAgIG51bVByb2Nlc3Npbmc6IHByb2Nlc3NpbmcsXG4gICAgICAgICAgICBiYXRjaGVzXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERlZmVycmVkUXVldWU7Il19