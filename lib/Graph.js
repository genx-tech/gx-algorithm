"use strict";

require("source-map-support/register");

const TopoSort = require('./TopoSort');

const {
  _
} = require('rk-utils');

class Graph {
  constructor(json) {
    this.topo = new TopoSort();

    if (json) {
      this.nodes = _.cloneDeep(json.nodes);

      if (_.isEmpty(json.edges)) {
        _.forOwn(edges, (targets, source) => {
          this.topo.add(source, targets);
        });
      }

      this.startNodes = json.startNodes;
      this.endNodes = json.endNodes;
    } else {
      this.nodes = {};
    }
  }

  hasNode(key) {
    return key in this.nodes;
  }

  getNode(key) {
    return this.nodes[key];
  }

  setNode(key, value) {
    this.nodes[key] = value;
  }

  setEdge(sourceNode, targetNode) {
    if (!this.hasNode(sourceNode)) {
      throw new Error(`Source node [${sourceNode}] not exists.`);
    }

    if (!this.hasNode(targetNode)) {
      throw new Error(`Target node [${targetNode}] not exists.`);
    }

    this.topo.add(sourceNode, targetNode);
  }

  getTargetNodes(sourceNode) {
    return Array.from(this.topo.mapOfDependents[sourceNode]);
  }

  getSourceNodes(targetNode) {
    return Array.from(this.topo.mapOfDependencies[targetNode]);
  }

  calcStartEnd() {
    let seq = this.topo.sort();
    this.startNodes = _.takeWhile(seq, e => !this.topo.hasDependency(e));
    this.endNodes = _.takeRightWhile(seq, e => !this.topo.hasDependent(e));
  }

  toJSON() {
    return {
      nodes: this.nodes,
      edges: _.mapValues(this.topo.mapOfDependents, nodes => Array.from(nodes)),
      startNodes: this.startNodes,
      endNodes: this.endNodes
    };
  }

}

module.exports = Graph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9HcmFwaC5qcyJdLCJuYW1lcyI6WyJUb3BvU29ydCIsInJlcXVpcmUiLCJfIiwiR3JhcGgiLCJjb25zdHJ1Y3RvciIsImpzb24iLCJ0b3BvIiwibm9kZXMiLCJjbG9uZURlZXAiLCJpc0VtcHR5IiwiZWRnZXMiLCJmb3JPd24iLCJ0YXJnZXRzIiwic291cmNlIiwiYWRkIiwic3RhcnROb2RlcyIsImVuZE5vZGVzIiwiaGFzTm9kZSIsImtleSIsImdldE5vZGUiLCJzZXROb2RlIiwidmFsdWUiLCJzZXRFZGdlIiwic291cmNlTm9kZSIsInRhcmdldE5vZGUiLCJFcnJvciIsImdldFRhcmdldE5vZGVzIiwiQXJyYXkiLCJmcm9tIiwibWFwT2ZEZXBlbmRlbnRzIiwiZ2V0U291cmNlTm9kZXMiLCJtYXBPZkRlcGVuZGVuY2llcyIsImNhbGNTdGFydEVuZCIsInNlcSIsInNvcnQiLCJ0YWtlV2hpbGUiLCJlIiwiaGFzRGVwZW5kZW5jeSIsInRha2VSaWdodFdoaWxlIiwiaGFzRGVwZW5kZW50IiwidG9KU09OIiwibWFwVmFsdWVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQVFELE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBLE1BQU1FLEtBQU4sQ0FBWTtBQUNSQyxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBTztBQUNkLFNBQUtDLElBQUwsR0FBWSxJQUFJTixRQUFKLEVBQVo7O0FBRUEsUUFBSUssSUFBSixFQUFVO0FBQ04sV0FBS0UsS0FBTCxHQUFhTCxDQUFDLENBQUNNLFNBQUYsQ0FBWUgsSUFBSSxDQUFDRSxLQUFqQixDQUFiOztBQUNBLFVBQUlMLENBQUMsQ0FBQ08sT0FBRixDQUFVSixJQUFJLENBQUNLLEtBQWYsQ0FBSixFQUEyQjtBQUN2QlIsUUFBQUEsQ0FBQyxDQUFDUyxNQUFGLENBQVNELEtBQVQsRUFBZ0IsQ0FBQ0UsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ2pDLGVBQUtQLElBQUwsQ0FBVVEsR0FBVixDQUFjRCxNQUFkLEVBQXNCRCxPQUF0QjtBQUNILFNBRkQ7QUFHSDs7QUFDRCxXQUFLRyxVQUFMLEdBQWtCVixJQUFJLENBQUNVLFVBQXZCO0FBQ0EsV0FBS0MsUUFBTCxHQUFnQlgsSUFBSSxDQUFDVyxRQUFyQjtBQUNILEtBVEQsTUFTTztBQUNILFdBQUtULEtBQUwsR0FBYSxFQUFiO0FBQ0g7QUFDSjs7QUFFRFUsRUFBQUEsT0FBTyxDQUFDQyxHQUFELEVBQU07QUFDVCxXQUFPQSxHQUFHLElBQUksS0FBS1gsS0FBbkI7QUFDSDs7QUFFRFksRUFBQUEsT0FBTyxDQUFDRCxHQUFELEVBQU07QUFDVCxXQUFPLEtBQUtYLEtBQUwsQ0FBV1csR0FBWCxDQUFQO0FBQ0g7O0FBRURFLEVBQUFBLE9BQU8sQ0FBQ0YsR0FBRCxFQUFNRyxLQUFOLEVBQWE7QUFDaEIsU0FBS2QsS0FBTCxDQUFXVyxHQUFYLElBQWtCRyxLQUFsQjtBQUNIOztBQUVEQyxFQUFBQSxPQUFPLENBQUNDLFVBQUQsRUFBYUMsVUFBYixFQUF5QjtBQUM1QixRQUFJLENBQUMsS0FBS1AsT0FBTCxDQUFhTSxVQUFiLENBQUwsRUFBK0I7QUFDM0IsWUFBTSxJQUFJRSxLQUFKLENBQVcsZ0JBQWVGLFVBQVcsZUFBckMsQ0FBTjtBQUNIOztBQUNELFFBQUksQ0FBQyxLQUFLTixPQUFMLENBQWFPLFVBQWIsQ0FBTCxFQUErQjtBQUMzQixZQUFNLElBQUlDLEtBQUosQ0FBVyxnQkFBZUQsVUFBVyxlQUFyQyxDQUFOO0FBQ0g7O0FBQ0QsU0FBS2xCLElBQUwsQ0FBVVEsR0FBVixDQUFjUyxVQUFkLEVBQTBCQyxVQUExQjtBQUNIOztBQUVERSxFQUFBQSxjQUFjLENBQUNILFVBQUQsRUFBYTtBQUN2QixXQUFPSSxLQUFLLENBQUNDLElBQU4sQ0FBVyxLQUFLdEIsSUFBTCxDQUFVdUIsZUFBVixDQUEwQk4sVUFBMUIsQ0FBWCxDQUFQO0FBQ0g7O0FBRURPLEVBQUFBLGNBQWMsQ0FBQ04sVUFBRCxFQUFhO0FBQ3ZCLFdBQU9HLEtBQUssQ0FBQ0MsSUFBTixDQUFXLEtBQUt0QixJQUFMLENBQVV5QixpQkFBVixDQUE0QlAsVUFBNUIsQ0FBWCxDQUFQO0FBQ0g7O0FBRURRLEVBQUFBLFlBQVksR0FBRztBQUNYLFFBQUlDLEdBQUcsR0FBRyxLQUFLM0IsSUFBTCxDQUFVNEIsSUFBVixFQUFWO0FBQ0EsU0FBS25CLFVBQUwsR0FBa0JiLENBQUMsQ0FBQ2lDLFNBQUYsQ0FBWUYsR0FBWixFQUFpQkcsQ0FBQyxJQUFJLENBQUMsS0FBSzlCLElBQUwsQ0FBVStCLGFBQVYsQ0FBd0JELENBQXhCLENBQXZCLENBQWxCO0FBQ0EsU0FBS3BCLFFBQUwsR0FBZ0JkLENBQUMsQ0FBQ29DLGNBQUYsQ0FBaUJMLEdBQWpCLEVBQXNCRyxDQUFDLElBQUksQ0FBQyxLQUFLOUIsSUFBTCxDQUFVaUMsWUFBVixDQUF1QkgsQ0FBdkIsQ0FBNUIsQ0FBaEI7QUFDSDs7QUFFREksRUFBQUEsTUFBTSxHQUFHO0FBQ0wsV0FBTztBQUNIakMsTUFBQUEsS0FBSyxFQUFFLEtBQUtBLEtBRFQ7QUFFSEcsTUFBQUEsS0FBSyxFQUFFUixDQUFDLENBQUN1QyxTQUFGLENBQVksS0FBS25DLElBQUwsQ0FBVXVCLGVBQXRCLEVBQXdDdEIsS0FBRCxJQUFXb0IsS0FBSyxDQUFDQyxJQUFOLENBQVdyQixLQUFYLENBQWxELENBRko7QUFHSFEsTUFBQUEsVUFBVSxFQUFFLEtBQUtBLFVBSGQ7QUFJSEMsTUFBQUEsUUFBUSxFQUFFLEtBQUtBO0FBSlosS0FBUDtBQU1IOztBQTdETzs7QUFnRVowQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QyxLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRvcG9Tb3J0ID0gcmVxdWlyZSgnLi9Ub3BvU29ydCcpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5jbGFzcyBHcmFwaCB7XG4gICAgY29uc3RydWN0b3IoanNvbikge1xuICAgICAgICB0aGlzLnRvcG8gPSBuZXcgVG9wb1NvcnQoKTtcblxuICAgICAgICBpZiAoanNvbikge1xuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IF8uY2xvbmVEZWVwKGpzb24ubm9kZXMpO1xuICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShqc29uLmVkZ2VzKSkge1xuICAgICAgICAgICAgICAgIF8uZm9yT3duKGVkZ2VzLCAodGFyZ2V0cywgc291cmNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wby5hZGQoc291cmNlLCB0YXJnZXRzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhcnROb2RlcyA9IGpzb24uc3RhcnROb2RlcztcbiAgICAgICAgICAgIHRoaXMuZW5kTm9kZXMgPSBqc29uLmVuZE5vZGVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IHt9O1xuICAgICAgICB9ICAgICAgICBcbiAgICB9XG5cbiAgICBoYXNOb2RlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMubm9kZXM7XG4gICAgfVxuXG4gICAgZ2V0Tm9kZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXNba2V5XTtcbiAgICB9XG5cbiAgICBzZXROb2RlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5ub2Rlc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgc2V0RWRnZShzb3VyY2VOb2RlLCB0YXJnZXROb2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNOb2RlKHNvdXJjZU5vZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNvdXJjZSBub2RlIFske3NvdXJjZU5vZGV9XSBub3QgZXhpc3RzLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5oYXNOb2RlKHRhcmdldE5vZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRhcmdldCBub2RlIFske3RhcmdldE5vZGV9XSBub3QgZXhpc3RzLmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9wby5hZGQoc291cmNlTm9kZSwgdGFyZ2V0Tm9kZSk7XG4gICAgfVxuXG4gICAgZ2V0VGFyZ2V0Tm9kZXMoc291cmNlTm9kZSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnRvcG8ubWFwT2ZEZXBlbmRlbnRzW3NvdXJjZU5vZGVdKTtcbiAgICB9XG5cbiAgICBnZXRTb3VyY2VOb2Rlcyh0YXJnZXROb2RlKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudG9wby5tYXBPZkRlcGVuZGVuY2llc1t0YXJnZXROb2RlXSk7XG4gICAgfVxuXG4gICAgY2FsY1N0YXJ0RW5kKCkge1xuICAgICAgICBsZXQgc2VxID0gdGhpcy50b3BvLnNvcnQoKTtcbiAgICAgICAgdGhpcy5zdGFydE5vZGVzID0gXy50YWtlV2hpbGUoc2VxLCBlID0+ICF0aGlzLnRvcG8uaGFzRGVwZW5kZW5jeShlKSk7XG4gICAgICAgIHRoaXMuZW5kTm9kZXMgPSBfLnRha2VSaWdodFdoaWxlKHNlcSwgZSA9PiAhdGhpcy50b3BvLmhhc0RlcGVuZGVudChlKSk7XG4gICAgfVxuXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm9kZXM6IHRoaXMubm9kZXMsXG4gICAgICAgICAgICBlZGdlczogXy5tYXBWYWx1ZXModGhpcy50b3BvLm1hcE9mRGVwZW5kZW50cywgKG5vZGVzKSA9PiBBcnJheS5mcm9tKG5vZGVzKSksXG4gICAgICAgICAgICBzdGFydE5vZGVzOiB0aGlzLnN0YXJ0Tm9kZXMsXG4gICAgICAgICAgICBlbmROb2RlczogdGhpcy5lbmROb2Rlc1xuICAgICAgICB9O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHcmFwaDsiXX0=